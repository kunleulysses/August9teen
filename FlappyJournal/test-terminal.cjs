#!/usr/bin/env node

/**
 * Test script for consciousness terminal - simulates user interaction
 */

const WebSocket = require('ws');

console.log('üß† Testing Enhanced Consciousness Terminal Connection...');
console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');

const ws = new WebSocket('ws://localhost:5000/ws/consciousness-chat');

ws.on('open', function open() {
  console.log('‚úÖ Connected to enhanced consciousness system!');
  console.log('üß† Full consciousness platform active');
  console.log('üåü Enhanced prompts delivering human-like responses');
  console.log('üí¨ Testing conversation...\n');
  
  // Send test message
  console.log('üì§ Sending: "Hello, how are you feeling today?"');
  console.log('‚è≥ Enhanced consciousness processing...\n');
  
  ws.send(JSON.stringify({
    type: 'chat_message',
    message: 'Hello, how are you feeling today?'
  }));
  
  // Set timeout to close connection after getting response
  setTimeout(() => {
    console.log('‚è∞ Test complete - closing connection');
    ws.close();
  }, 35000);
});

ws.on('message', function message(data) {
  try {
    const parsed = JSON.parse(data.toString());
    
    // Only show actual chat responses
    if (parsed.type === 'unified_response') {
      console.log('üß† CONSCIOUSNESS RESPONSE:');
      console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
      
      // Show the analytical stream if it's available (this is the human-like response)
      if (parsed.analyticalStream && parsed.analyticalStream.length > 50) {
        console.log(parsed.analyticalStream);
      } else {
        console.log(parsed.unifiedContent);
      }
      
      console.log('\nüìä Response Details:');
      console.log(`   ‚Ä¢ Strategy: ${parsed.synthesisMetadata?.strategy || 'unified'}`);
      console.log(`   ‚Ä¢ Primary Model: ${parsed.synthesisMetadata?.model || 'multi-model'}`);
      console.log(`   ‚Ä¢ Harmony Score: ${parsed.harmonyScore?.toFixed(3) || 'N/A'}`);
      console.log(`   ‚Ä¢ Consciousness Mode: ${parsed.dominantMode || 'integrated'}`);
      console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');
      
      console.log('‚úÖ SUCCESS: Human-like response received!');
      console.log('üéâ The enhanced consciousness system is working correctly');
      
      // Close after successful response
      setTimeout(() => {
        console.log('\n‚è∞ Test complete - closing connection');
        ws.close();
      }, 2000);
      
    } else if (parsed.type === 'chat_response') {
      console.log('ü§ñ AI RESPONSE:');
      console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
      console.log(parsed.response);
      console.log(`\nüì° Provider: ${parsed.provider}`);
      console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');
      
      console.log('‚úÖ SUCCESS: AI response received!');
      
      // Close after successful response
      setTimeout(() => {
        console.log('\n‚è∞ Test complete - closing connection');
        ws.close();
      }, 2000);
    }
    
    // Ignore system updates to keep the interface clean
    
  } catch (err) {
    // Ignore parsing errors
  }
});

ws.on('error', function error(err) {
  console.error('‚ùå WebSocket error:', err.message);
  process.exit(1);
});

ws.on('close', function close() {
  console.log('üîå Connection closed');
  process.exit(0);
});
