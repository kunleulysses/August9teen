services:
  # PostgreSQL Database
  postgres:
    image: postgres:15.5-alpine
    container_name: consciousness-postgres
    env_file:
      - .env.production
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./setup-database.sql:/docker-entrypoint-initdb.d/setup-database.sql
    networks:
      - consciousness-network
    restart: unless-stopped

  # Consciousness System Core
  consciousness-core:
    build:
      context: .
      dockerfile: Dockerfile.consciousness
    container_name: consciousness-core
    env_file:
      - .env.production
    environment:
      NODE_ENV: production
      CONSCIOUSNESS_MODE: ${CONSCIOUSNESS_MODE}
      HARMONY_TARGET: ${HARMONY_TARGET}
      PROCESSING_FREQUENCY: ${PROCESSING_FREQUENCY}
      API_INTEGRATION_MODE: ${API_INTEGRATION_MODE}
      MATHEMATICAL_INTEGRATION: ${MATHEMATICAL_INTEGRATION}
      EMOTIONAL_INTELLIGENCE: ${EMOTIONAL_INTELLIGENCE}
      BAYESIAN_DECISION_MAKING: ${BAYESIAN_DECISION_MAKING}
      GEMINI_DUAL_MODEL: ${GEMINI_DUAL_MODEL}
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      NODE_OPTIONS: ${NODE_OPTIONS}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      VENICE_AI_API_KEY: ${VENICE_AI_API_KEY}
    volumes:
      - consciousness_logs:/var/log/consciousness
      - consciousness_data:/opt/consciousness/data
      - ./FlappyJournal/server:/opt/consciousness/server:ro
    ports:
      - "3002:3002"  # WebSocket server
      - "5005:5005"  # Consciousness conversations
    networks:
      - consciousness-network
    depends_on:
      - postgres
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5005/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G

  # Main Server (Port 5000)
  main-server:
    build:
      context: .
      dockerfile: Dockerfile.ui
    container_name: consciousness-main-server
    env_file:
      - .env.production
    environment:
      NODE_ENV: production
      PORT: 5000
      HOST: 0.0.0.0
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      VENICE_AI_API_KEY: ${VENICE_AI_API_KEY}
    volumes:
      - web_uploads:/opt/app/uploads
      - web_logs:/var/log/web
    ports:
      - "5000:5000"
    networks:
      - consciousness-network
    depends_on:
      - postgres
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: ["node", "server/index.js"]
    deploy:
      resources:
        limits:
          memory: 1G

  # Web Application
  web-app:
    build:
      context: .
      dockerfile: Dockerfile.ui
    container_name: consciousness-web
    env_file:
      - .env.production
    environment:
      NODE_ENV: production
      PORT: 3000
      HOST: 0.0.0.0
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
    volumes:
      - web_uploads:/opt/app/uploads
      - web_logs:/var/log/web
    ports:
      - "3000:3000"
    networks:
      - consciousness-network
    depends_on:
      - postgres
      - consciousness-core
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G

  # Reverse Proxy (Caddy)
  caddy:
    image: caddy:2.7.6-alpine
    container_name: consciousness-proxy
    env_file:
      - .env.production
    volumes:
      - ./Caddyfile.docker:/etc/caddy/Caddyfile
      - caddy_data:/data
      - caddy_config:/config
    networks:
      - consciousness-network
    depends_on:
      - web-app
      - consciousness-core
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M

  # Monitoring (Optional)
  prometheus:
    image: prom/prometheus:v2.48.1
    container_name: consciousness-prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - consciousness-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M

  grafana:
    image: grafana/grafana:10.2.0
    container_name: consciousness-grafana
    env_file:
      - .env.production
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GF_SECURITY_ADMIN_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana-dashboards:/etc/grafana/provisioning/dashboards
    ports:
      - "3001:3000"
    networks:
      - consciousness-network
    depends_on:
      - prometheus
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M

volumes:
  postgres_data:
    driver: local
  consciousness_logs:
    driver: local
  consciousness_data:
    driver: local
  web_uploads:
    driver: local
  web_logs:
    driver: local
  caddy_data:
    driver: local
  caddy_config:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  consciousness-network:
    external: true
    name: featherweight_consciousness-network
