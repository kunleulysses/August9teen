version: "3.9"

services:
  db:
    image: postgres:15-alpine
    container_name: db
    restart: unless-stopped
    env_file:
      - .env.docker
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-appdb}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgrespassword}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 5s
      timeout: 5s
      retries: 10

  redis:
    image: redis:7-alpine
    container_name: redis
    restart: unless-stopped
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    container_name: api
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - .env.docker
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgrespassword}@db:5432/${POSTGRES_DB:-appdb}
      REDIS_URL: redis://redis:6379
      NODE_ENV: ${NODE_ENV:-development}
    volumes:
      - uploads:/app/uploads
      - logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  core:
    build:
      context: .
      dockerfile: Dockerfile.consciousness
    container_name: core
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - .env.docker
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgrespassword}@db:5432/${POSTGRES_DB:-appdb}
      REDIS_URL: redis://redis:6379
      NODE_ENV: ${NODE_ENV:-development}
    volumes:
      - uploads:/app/uploads
      - logs:/app/logs
    ports:
      - "3002:3002"
      - "5005:5005"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5005/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  reality-generator:
    build:
      context: .
      dockerfile: Dockerfile.consciousness
    container_name: reality-generator
    command: ["node", "/opt/consciousness/server/reality-generator-simple.cjs"]
    environment:
      NODE_ENV: production
      REALITY_GENERATION_PORT: 5006
      DATABASE_URL: ${DATABASE_URL}
    depends_on:
      db:
        condition: service_healthy
      core:
        condition: service_healthy
    ports:
      - "5006:5006"
    volumes:
      - reality_data:/opt/consciousness/reality-data

  web:
    build:
      context: .
      dockerfile: Dockerfile.ui
    container_name: web
    restart: unless-stopped
    depends_on:
      api:
        condition: service_healthy
      core:
        condition: service_healthy
      reality-generator:
        condition: service_started
    env_file:
      - .env.docker
    environment:
      NODE_ENV: ${NODE_ENV}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4173/"]
      interval: 10s
      timeout: 5s
      retries: 5

  proxy:
    image: caddy:2-alpine
    container_name: proxy
    restart: unless-stopped
    env_file:
      - .env.docker
    depends_on:
      web:
        condition: service_healthy
      core:
        condition: service_healthy
    ports:
      - "80:80"
      - "443:443"
    environment:
      - CADDY_MAINTENANCE=${CADDY_MAINTENANCE:-off}
    volumes:
      - ./Caddyfile.docker:/etc/caddy/Caddyfile
      - caddy_data:/data
      - caddy_config:/config
    extra_hosts:
      - "host.docker.internal:host-gateway"

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD:-admin}
    volumes:
      - ./prometheus/grafana-provisioning/:/etc/grafana/provisioning/

volumes:
  postgres_data:
  redis_data:
  uploads:
  logs:
  caddy_data:
  caddy_config:
  reality_data: