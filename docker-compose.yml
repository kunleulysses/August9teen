version: "3.9"

services:
  db:
    image: postgres:15-alpine
    restart: always
    env_file:
      - .env.docker
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}"]
      interval: 5s
      timeout: 5s
      retries: 10

  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    container_name: api
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - .env.docker
    environment:
      DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      NODE_ENV: ${NODE_ENV}
    ports:
      - "4000:4000"
    volumes:
      - ./server/api/uploads:/app/server/api/uploads
      - ./shared:/app/shared
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  core:
    build:
      context: .
      dockerfile: Dockerfile.consciousness
    container_name: core
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - .env.docker
    environment:
      DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      NODE_ENV: ${NODE_ENV}
    ports:
      - "5000:5000"
    volumes:
      - ./FlappyJournal:/opt/consciousness/FlappyJournal
      - ./shared:/opt/consciousness/shared
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  web:
    build:
      context: .
      dockerfile: Dockerfile.ui
    container_name: web
    restart: unless-stopped
    depends_on:
      api:
        condition: service_healthy
      core:
        condition: service_healthy
    env_file:
      - .env.docker
    environment:
      NODE_ENV: ${NODE_ENV}
    ports:
      - "8080:8080"
    volumes:
      - ./FlappyJournal:/opt/app/FlappyJournal
      - ./shared:/opt/app/shared
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4173/"]
      interval: 10s
      timeout: 5s
      retries: 5

  proxy:
    image: caddy:2-alpine
    container_name: proxy
    restart: unless-stopped
    depends_on:
      web:
        condition: service_healthy
      core:
        condition: service_healthy
    env_file:
      - .env.docker
    ports:
      - "80:80"
      - "443:443"
    environment:
      - CADDY_MAINTENANCE=${CADDY_MAINTENANCE}
    volumes:
      - ./Caddyfile.docker:/etc/caddy/Caddyfile
      - caddy_data:/data
      - caddy_config:/config

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    profiles: ["monitoring"]
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    profiles: ["monitoring"]
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD:-admin}
    volumes:
      - ./prometheus/grafana-provisioning/:/etc/grafana/provisioning/

volumes:
  postgres_data:
  uploads:
  logs:
  caddy_data:
  caddy_config: