
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Reality
 * 
 */
export type Reality = $Result.DefaultSelection<Prisma.$RealityPayload>
/**
 * Model RecursionPath
 * 
 */
export type RecursionPath = $Result.DefaultSelection<Prisma.$RecursionPathPayload>
/**
 * Model ConsciousnessField
 * 
 */
export type ConsciousnessField = $Result.DefaultSelection<Prisma.$ConsciousnessFieldPayload>
/**
 * Model Metric
 * 
 */
export type Metric = $Result.DefaultSelection<Prisma.$MetricPayload>
/**
 * Model SceneNode
 * 
 */
export type SceneNode = $Result.DefaultSelection<Prisma.$SceneNodePayload>
/**
 * Model FrameStat
 * 
 */
export type FrameStat = $Result.DefaultSelection<Prisma.$FrameStatPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Realities
 * const realities = await prisma.reality.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Realities
   * const realities = await prisma.reality.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.reality`: Exposes CRUD operations for the **Reality** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Realities
    * const realities = await prisma.reality.findMany()
    * ```
    */
  get reality(): Prisma.RealityDelegate<ExtArgs>;

  /**
   * `prisma.recursionPath`: Exposes CRUD operations for the **RecursionPath** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RecursionPaths
    * const recursionPaths = await prisma.recursionPath.findMany()
    * ```
    */
  get recursionPath(): Prisma.RecursionPathDelegate<ExtArgs>;

  /**
   * `prisma.consciousnessField`: Exposes CRUD operations for the **ConsciousnessField** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ConsciousnessFields
    * const consciousnessFields = await prisma.consciousnessField.findMany()
    * ```
    */
  get consciousnessField(): Prisma.ConsciousnessFieldDelegate<ExtArgs>;

  /**
   * `prisma.metric`: Exposes CRUD operations for the **Metric** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Metrics
    * const metrics = await prisma.metric.findMany()
    * ```
    */
  get metric(): Prisma.MetricDelegate<ExtArgs>;

  /**
   * `prisma.sceneNode`: Exposes CRUD operations for the **SceneNode** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SceneNodes
    * const sceneNodes = await prisma.sceneNode.findMany()
    * ```
    */
  get sceneNode(): Prisma.SceneNodeDelegate<ExtArgs>;

  /**
   * `prisma.frameStat`: Exposes CRUD operations for the **FrameStat** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FrameStats
    * const frameStats = await prisma.frameStat.findMany()
    * ```
    */
  get frameStat(): Prisma.FrameStatDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Reality: 'Reality',
    RecursionPath: 'RecursionPath',
    ConsciousnessField: 'ConsciousnessField',
    Metric: 'Metric',
    SceneNode: 'SceneNode',
    FrameStat: 'FrameStat'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "reality" | "recursionPath" | "consciousnessField" | "metric" | "sceneNode" | "frameStat"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Reality: {
        payload: Prisma.$RealityPayload<ExtArgs>
        fields: Prisma.RealityFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RealityFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RealityPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RealityFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RealityPayload>
          }
          findFirst: {
            args: Prisma.RealityFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RealityPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RealityFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RealityPayload>
          }
          findMany: {
            args: Prisma.RealityFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RealityPayload>[]
          }
          create: {
            args: Prisma.RealityCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RealityPayload>
          }
          createMany: {
            args: Prisma.RealityCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RealityCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RealityPayload>[]
          }
          delete: {
            args: Prisma.RealityDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RealityPayload>
          }
          update: {
            args: Prisma.RealityUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RealityPayload>
          }
          deleteMany: {
            args: Prisma.RealityDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RealityUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RealityUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RealityPayload>
          }
          aggregate: {
            args: Prisma.RealityAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReality>
          }
          groupBy: {
            args: Prisma.RealityGroupByArgs<ExtArgs>
            result: $Utils.Optional<RealityGroupByOutputType>[]
          }
          count: {
            args: Prisma.RealityCountArgs<ExtArgs>
            result: $Utils.Optional<RealityCountAggregateOutputType> | number
          }
        }
      }
      RecursionPath: {
        payload: Prisma.$RecursionPathPayload<ExtArgs>
        fields: Prisma.RecursionPathFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RecursionPathFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecursionPathPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RecursionPathFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecursionPathPayload>
          }
          findFirst: {
            args: Prisma.RecursionPathFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecursionPathPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RecursionPathFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecursionPathPayload>
          }
          findMany: {
            args: Prisma.RecursionPathFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecursionPathPayload>[]
          }
          create: {
            args: Prisma.RecursionPathCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecursionPathPayload>
          }
          createMany: {
            args: Prisma.RecursionPathCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RecursionPathCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecursionPathPayload>[]
          }
          delete: {
            args: Prisma.RecursionPathDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecursionPathPayload>
          }
          update: {
            args: Prisma.RecursionPathUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecursionPathPayload>
          }
          deleteMany: {
            args: Prisma.RecursionPathDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RecursionPathUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RecursionPathUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecursionPathPayload>
          }
          aggregate: {
            args: Prisma.RecursionPathAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRecursionPath>
          }
          groupBy: {
            args: Prisma.RecursionPathGroupByArgs<ExtArgs>
            result: $Utils.Optional<RecursionPathGroupByOutputType>[]
          }
          count: {
            args: Prisma.RecursionPathCountArgs<ExtArgs>
            result: $Utils.Optional<RecursionPathCountAggregateOutputType> | number
          }
        }
      }
      ConsciousnessField: {
        payload: Prisma.$ConsciousnessFieldPayload<ExtArgs>
        fields: Prisma.ConsciousnessFieldFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ConsciousnessFieldFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsciousnessFieldPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ConsciousnessFieldFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsciousnessFieldPayload>
          }
          findFirst: {
            args: Prisma.ConsciousnessFieldFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsciousnessFieldPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ConsciousnessFieldFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsciousnessFieldPayload>
          }
          findMany: {
            args: Prisma.ConsciousnessFieldFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsciousnessFieldPayload>[]
          }
          create: {
            args: Prisma.ConsciousnessFieldCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsciousnessFieldPayload>
          }
          createMany: {
            args: Prisma.ConsciousnessFieldCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ConsciousnessFieldCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsciousnessFieldPayload>[]
          }
          delete: {
            args: Prisma.ConsciousnessFieldDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsciousnessFieldPayload>
          }
          update: {
            args: Prisma.ConsciousnessFieldUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsciousnessFieldPayload>
          }
          deleteMany: {
            args: Prisma.ConsciousnessFieldDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ConsciousnessFieldUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ConsciousnessFieldUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsciousnessFieldPayload>
          }
          aggregate: {
            args: Prisma.ConsciousnessFieldAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateConsciousnessField>
          }
          groupBy: {
            args: Prisma.ConsciousnessFieldGroupByArgs<ExtArgs>
            result: $Utils.Optional<ConsciousnessFieldGroupByOutputType>[]
          }
          count: {
            args: Prisma.ConsciousnessFieldCountArgs<ExtArgs>
            result: $Utils.Optional<ConsciousnessFieldCountAggregateOutputType> | number
          }
        }
      }
      Metric: {
        payload: Prisma.$MetricPayload<ExtArgs>
        fields: Prisma.MetricFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MetricFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetricPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MetricFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetricPayload>
          }
          findFirst: {
            args: Prisma.MetricFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetricPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MetricFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetricPayload>
          }
          findMany: {
            args: Prisma.MetricFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetricPayload>[]
          }
          create: {
            args: Prisma.MetricCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetricPayload>
          }
          createMany: {
            args: Prisma.MetricCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MetricCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetricPayload>[]
          }
          delete: {
            args: Prisma.MetricDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetricPayload>
          }
          update: {
            args: Prisma.MetricUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetricPayload>
          }
          deleteMany: {
            args: Prisma.MetricDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MetricUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MetricUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetricPayload>
          }
          aggregate: {
            args: Prisma.MetricAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMetric>
          }
          groupBy: {
            args: Prisma.MetricGroupByArgs<ExtArgs>
            result: $Utils.Optional<MetricGroupByOutputType>[]
          }
          count: {
            args: Prisma.MetricCountArgs<ExtArgs>
            result: $Utils.Optional<MetricCountAggregateOutputType> | number
          }
        }
      }
      SceneNode: {
        payload: Prisma.$SceneNodePayload<ExtArgs>
        fields: Prisma.SceneNodeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SceneNodeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SceneNodePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SceneNodeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SceneNodePayload>
          }
          findFirst: {
            args: Prisma.SceneNodeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SceneNodePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SceneNodeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SceneNodePayload>
          }
          findMany: {
            args: Prisma.SceneNodeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SceneNodePayload>[]
          }
          create: {
            args: Prisma.SceneNodeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SceneNodePayload>
          }
          createMany: {
            args: Prisma.SceneNodeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SceneNodeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SceneNodePayload>[]
          }
          delete: {
            args: Prisma.SceneNodeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SceneNodePayload>
          }
          update: {
            args: Prisma.SceneNodeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SceneNodePayload>
          }
          deleteMany: {
            args: Prisma.SceneNodeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SceneNodeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SceneNodeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SceneNodePayload>
          }
          aggregate: {
            args: Prisma.SceneNodeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSceneNode>
          }
          groupBy: {
            args: Prisma.SceneNodeGroupByArgs<ExtArgs>
            result: $Utils.Optional<SceneNodeGroupByOutputType>[]
          }
          count: {
            args: Prisma.SceneNodeCountArgs<ExtArgs>
            result: $Utils.Optional<SceneNodeCountAggregateOutputType> | number
          }
        }
      }
      FrameStat: {
        payload: Prisma.$FrameStatPayload<ExtArgs>
        fields: Prisma.FrameStatFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FrameStatFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FrameStatPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FrameStatFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FrameStatPayload>
          }
          findFirst: {
            args: Prisma.FrameStatFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FrameStatPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FrameStatFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FrameStatPayload>
          }
          findMany: {
            args: Prisma.FrameStatFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FrameStatPayload>[]
          }
          create: {
            args: Prisma.FrameStatCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FrameStatPayload>
          }
          createMany: {
            args: Prisma.FrameStatCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FrameStatCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FrameStatPayload>[]
          }
          delete: {
            args: Prisma.FrameStatDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FrameStatPayload>
          }
          update: {
            args: Prisma.FrameStatUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FrameStatPayload>
          }
          deleteMany: {
            args: Prisma.FrameStatDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FrameStatUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.FrameStatUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FrameStatPayload>
          }
          aggregate: {
            args: Prisma.FrameStatAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFrameStat>
          }
          groupBy: {
            args: Prisma.FrameStatGroupByArgs<ExtArgs>
            result: $Utils.Optional<FrameStatGroupByOutputType>[]
          }
          count: {
            args: Prisma.FrameStatCountArgs<ExtArgs>
            result: $Utils.Optional<FrameStatCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */



  /**
   * Models
   */

  /**
   * Model Reality
   */

  export type AggregateReality = {
    _count: RealityCountAggregateOutputType | null
    _avg: RealityAvgAggregateOutputType | null
    _sum: RealitySumAggregateOutputType | null
    _min: RealityMinAggregateOutputType | null
    _max: RealityMaxAggregateOutputType | null
  }

  export type RealityAvgAggregateOutputType = {
    recursionDepth: number | null
    schemaVersion: number | null
  }

  export type RealitySumAggregateOutputType = {
    recursionDepth: number | null
    schemaVersion: number | null
  }

  export type RealityMinAggregateOutputType = {
    id: string | null
    description: string | null
    parameters: string | null
    recursionDepth: number | null
    parentId: string | null
    createdAt: Date | null
    schemaVersion: number | null
  }

  export type RealityMaxAggregateOutputType = {
    id: string | null
    description: string | null
    parameters: string | null
    recursionDepth: number | null
    parentId: string | null
    createdAt: Date | null
    schemaVersion: number | null
  }

  export type RealityCountAggregateOutputType = {
    id: number
    description: number
    parameters: number
    recursionDepth: number
    parentId: number
    createdAt: number
    schemaVersion: number
    _all: number
  }


  export type RealityAvgAggregateInputType = {
    recursionDepth?: true
    schemaVersion?: true
  }

  export type RealitySumAggregateInputType = {
    recursionDepth?: true
    schemaVersion?: true
  }

  export type RealityMinAggregateInputType = {
    id?: true
    description?: true
    parameters?: true
    recursionDepth?: true
    parentId?: true
    createdAt?: true
    schemaVersion?: true
  }

  export type RealityMaxAggregateInputType = {
    id?: true
    description?: true
    parameters?: true
    recursionDepth?: true
    parentId?: true
    createdAt?: true
    schemaVersion?: true
  }

  export type RealityCountAggregateInputType = {
    id?: true
    description?: true
    parameters?: true
    recursionDepth?: true
    parentId?: true
    createdAt?: true
    schemaVersion?: true
    _all?: true
  }

  export type RealityAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Reality to aggregate.
     */
    where?: RealityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Realities to fetch.
     */
    orderBy?: RealityOrderByWithRelationInput | RealityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RealityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Realities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Realities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Realities
    **/
    _count?: true | RealityCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RealityAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RealitySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RealityMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RealityMaxAggregateInputType
  }

  export type GetRealityAggregateType<T extends RealityAggregateArgs> = {
        [P in keyof T & keyof AggregateReality]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReality[P]>
      : GetScalarType<T[P], AggregateReality[P]>
  }




  export type RealityGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RealityWhereInput
    orderBy?: RealityOrderByWithAggregationInput | RealityOrderByWithAggregationInput[]
    by: RealityScalarFieldEnum[] | RealityScalarFieldEnum
    having?: RealityScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RealityCountAggregateInputType | true
    _avg?: RealityAvgAggregateInputType
    _sum?: RealitySumAggregateInputType
    _min?: RealityMinAggregateInputType
    _max?: RealityMaxAggregateInputType
  }

  export type RealityGroupByOutputType = {
    id: string
    description: string
    parameters: string | null
    recursionDepth: number | null
    parentId: string | null
    createdAt: Date
    schemaVersion: number
    _count: RealityCountAggregateOutputType | null
    _avg: RealityAvgAggregateOutputType | null
    _sum: RealitySumAggregateOutputType | null
    _min: RealityMinAggregateOutputType | null
    _max: RealityMaxAggregateOutputType | null
  }

  type GetRealityGroupByPayload<T extends RealityGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RealityGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RealityGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RealityGroupByOutputType[P]>
            : GetScalarType<T[P], RealityGroupByOutputType[P]>
        }
      >
    >


  export type RealitySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    description?: boolean
    parameters?: boolean
    recursionDepth?: boolean
    parentId?: boolean
    createdAt?: boolean
    schemaVersion?: boolean
  }, ExtArgs["result"]["reality"]>

  export type RealitySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    description?: boolean
    parameters?: boolean
    recursionDepth?: boolean
    parentId?: boolean
    createdAt?: boolean
    schemaVersion?: boolean
  }, ExtArgs["result"]["reality"]>

  export type RealitySelectScalar = {
    id?: boolean
    description?: boolean
    parameters?: boolean
    recursionDepth?: boolean
    parentId?: boolean
    createdAt?: boolean
    schemaVersion?: boolean
  }


  export type $RealityPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Reality"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      description: string
      parameters: string | null
      recursionDepth: number | null
      parentId: string | null
      createdAt: Date
      schemaVersion: number
    }, ExtArgs["result"]["reality"]>
    composites: {}
  }

  type RealityGetPayload<S extends boolean | null | undefined | RealityDefaultArgs> = $Result.GetResult<Prisma.$RealityPayload, S>

  type RealityCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RealityFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RealityCountAggregateInputType | true
    }

  export interface RealityDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Reality'], meta: { name: 'Reality' } }
    /**
     * Find zero or one Reality that matches the filter.
     * @param {RealityFindUniqueArgs} args - Arguments to find a Reality
     * @example
     * // Get one Reality
     * const reality = await prisma.reality.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RealityFindUniqueArgs>(args: SelectSubset<T, RealityFindUniqueArgs<ExtArgs>>): Prisma__RealityClient<$Result.GetResult<Prisma.$RealityPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Reality that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {RealityFindUniqueOrThrowArgs} args - Arguments to find a Reality
     * @example
     * // Get one Reality
     * const reality = await prisma.reality.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RealityFindUniqueOrThrowArgs>(args: SelectSubset<T, RealityFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RealityClient<$Result.GetResult<Prisma.$RealityPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Reality that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RealityFindFirstArgs} args - Arguments to find a Reality
     * @example
     * // Get one Reality
     * const reality = await prisma.reality.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RealityFindFirstArgs>(args?: SelectSubset<T, RealityFindFirstArgs<ExtArgs>>): Prisma__RealityClient<$Result.GetResult<Prisma.$RealityPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Reality that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RealityFindFirstOrThrowArgs} args - Arguments to find a Reality
     * @example
     * // Get one Reality
     * const reality = await prisma.reality.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RealityFindFirstOrThrowArgs>(args?: SelectSubset<T, RealityFindFirstOrThrowArgs<ExtArgs>>): Prisma__RealityClient<$Result.GetResult<Prisma.$RealityPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Realities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RealityFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Realities
     * const realities = await prisma.reality.findMany()
     * 
     * // Get first 10 Realities
     * const realities = await prisma.reality.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const realityWithIdOnly = await prisma.reality.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RealityFindManyArgs>(args?: SelectSubset<T, RealityFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RealityPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Reality.
     * @param {RealityCreateArgs} args - Arguments to create a Reality.
     * @example
     * // Create one Reality
     * const Reality = await prisma.reality.create({
     *   data: {
     *     // ... data to create a Reality
     *   }
     * })
     * 
     */
    create<T extends RealityCreateArgs>(args: SelectSubset<T, RealityCreateArgs<ExtArgs>>): Prisma__RealityClient<$Result.GetResult<Prisma.$RealityPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Realities.
     * @param {RealityCreateManyArgs} args - Arguments to create many Realities.
     * @example
     * // Create many Realities
     * const reality = await prisma.reality.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RealityCreateManyArgs>(args?: SelectSubset<T, RealityCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Realities and returns the data saved in the database.
     * @param {RealityCreateManyAndReturnArgs} args - Arguments to create many Realities.
     * @example
     * // Create many Realities
     * const reality = await prisma.reality.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Realities and only return the `id`
     * const realityWithIdOnly = await prisma.reality.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RealityCreateManyAndReturnArgs>(args?: SelectSubset<T, RealityCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RealityPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Reality.
     * @param {RealityDeleteArgs} args - Arguments to delete one Reality.
     * @example
     * // Delete one Reality
     * const Reality = await prisma.reality.delete({
     *   where: {
     *     // ... filter to delete one Reality
     *   }
     * })
     * 
     */
    delete<T extends RealityDeleteArgs>(args: SelectSubset<T, RealityDeleteArgs<ExtArgs>>): Prisma__RealityClient<$Result.GetResult<Prisma.$RealityPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Reality.
     * @param {RealityUpdateArgs} args - Arguments to update one Reality.
     * @example
     * // Update one Reality
     * const reality = await prisma.reality.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RealityUpdateArgs>(args: SelectSubset<T, RealityUpdateArgs<ExtArgs>>): Prisma__RealityClient<$Result.GetResult<Prisma.$RealityPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Realities.
     * @param {RealityDeleteManyArgs} args - Arguments to filter Realities to delete.
     * @example
     * // Delete a few Realities
     * const { count } = await prisma.reality.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RealityDeleteManyArgs>(args?: SelectSubset<T, RealityDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Realities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RealityUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Realities
     * const reality = await prisma.reality.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RealityUpdateManyArgs>(args: SelectSubset<T, RealityUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Reality.
     * @param {RealityUpsertArgs} args - Arguments to update or create a Reality.
     * @example
     * // Update or create a Reality
     * const reality = await prisma.reality.upsert({
     *   create: {
     *     // ... data to create a Reality
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Reality we want to update
     *   }
     * })
     */
    upsert<T extends RealityUpsertArgs>(args: SelectSubset<T, RealityUpsertArgs<ExtArgs>>): Prisma__RealityClient<$Result.GetResult<Prisma.$RealityPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Realities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RealityCountArgs} args - Arguments to filter Realities to count.
     * @example
     * // Count the number of Realities
     * const count = await prisma.reality.count({
     *   where: {
     *     // ... the filter for the Realities we want to count
     *   }
     * })
    **/
    count<T extends RealityCountArgs>(
      args?: Subset<T, RealityCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RealityCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Reality.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RealityAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RealityAggregateArgs>(args: Subset<T, RealityAggregateArgs>): Prisma.PrismaPromise<GetRealityAggregateType<T>>

    /**
     * Group by Reality.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RealityGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RealityGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RealityGroupByArgs['orderBy'] }
        : { orderBy?: RealityGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RealityGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRealityGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Reality model
   */
  readonly fields: RealityFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Reality.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RealityClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Reality model
   */ 
  interface RealityFieldRefs {
    readonly id: FieldRef<"Reality", 'String'>
    readonly description: FieldRef<"Reality", 'String'>
    readonly parameters: FieldRef<"Reality", 'String'>
    readonly recursionDepth: FieldRef<"Reality", 'Int'>
    readonly parentId: FieldRef<"Reality", 'String'>
    readonly createdAt: FieldRef<"Reality", 'DateTime'>
    readonly schemaVersion: FieldRef<"Reality", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Reality findUnique
   */
  export type RealityFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reality
     */
    select?: RealitySelect<ExtArgs> | null
    /**
     * Filter, which Reality to fetch.
     */
    where: RealityWhereUniqueInput
  }

  /**
   * Reality findUniqueOrThrow
   */
  export type RealityFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reality
     */
    select?: RealitySelect<ExtArgs> | null
    /**
     * Filter, which Reality to fetch.
     */
    where: RealityWhereUniqueInput
  }

  /**
   * Reality findFirst
   */
  export type RealityFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reality
     */
    select?: RealitySelect<ExtArgs> | null
    /**
     * Filter, which Reality to fetch.
     */
    where?: RealityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Realities to fetch.
     */
    orderBy?: RealityOrderByWithRelationInput | RealityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Realities.
     */
    cursor?: RealityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Realities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Realities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Realities.
     */
    distinct?: RealityScalarFieldEnum | RealityScalarFieldEnum[]
  }

  /**
   * Reality findFirstOrThrow
   */
  export type RealityFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reality
     */
    select?: RealitySelect<ExtArgs> | null
    /**
     * Filter, which Reality to fetch.
     */
    where?: RealityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Realities to fetch.
     */
    orderBy?: RealityOrderByWithRelationInput | RealityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Realities.
     */
    cursor?: RealityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Realities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Realities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Realities.
     */
    distinct?: RealityScalarFieldEnum | RealityScalarFieldEnum[]
  }

  /**
   * Reality findMany
   */
  export type RealityFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reality
     */
    select?: RealitySelect<ExtArgs> | null
    /**
     * Filter, which Realities to fetch.
     */
    where?: RealityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Realities to fetch.
     */
    orderBy?: RealityOrderByWithRelationInput | RealityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Realities.
     */
    cursor?: RealityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Realities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Realities.
     */
    skip?: number
    distinct?: RealityScalarFieldEnum | RealityScalarFieldEnum[]
  }

  /**
   * Reality create
   */
  export type RealityCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reality
     */
    select?: RealitySelect<ExtArgs> | null
    /**
     * The data needed to create a Reality.
     */
    data: XOR<RealityCreateInput, RealityUncheckedCreateInput>
  }

  /**
   * Reality createMany
   */
  export type RealityCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Realities.
     */
    data: RealityCreateManyInput | RealityCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Reality createManyAndReturn
   */
  export type RealityCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reality
     */
    select?: RealitySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Realities.
     */
    data: RealityCreateManyInput | RealityCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Reality update
   */
  export type RealityUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reality
     */
    select?: RealitySelect<ExtArgs> | null
    /**
     * The data needed to update a Reality.
     */
    data: XOR<RealityUpdateInput, RealityUncheckedUpdateInput>
    /**
     * Choose, which Reality to update.
     */
    where: RealityWhereUniqueInput
  }

  /**
   * Reality updateMany
   */
  export type RealityUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Realities.
     */
    data: XOR<RealityUpdateManyMutationInput, RealityUncheckedUpdateManyInput>
    /**
     * Filter which Realities to update
     */
    where?: RealityWhereInput
  }

  /**
   * Reality upsert
   */
  export type RealityUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reality
     */
    select?: RealitySelect<ExtArgs> | null
    /**
     * The filter to search for the Reality to update in case it exists.
     */
    where: RealityWhereUniqueInput
    /**
     * In case the Reality found by the `where` argument doesn't exist, create a new Reality with this data.
     */
    create: XOR<RealityCreateInput, RealityUncheckedCreateInput>
    /**
     * In case the Reality was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RealityUpdateInput, RealityUncheckedUpdateInput>
  }

  /**
   * Reality delete
   */
  export type RealityDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reality
     */
    select?: RealitySelect<ExtArgs> | null
    /**
     * Filter which Reality to delete.
     */
    where: RealityWhereUniqueInput
  }

  /**
   * Reality deleteMany
   */
  export type RealityDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Realities to delete
     */
    where?: RealityWhereInput
  }

  /**
   * Reality without action
   */
  export type RealityDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reality
     */
    select?: RealitySelect<ExtArgs> | null
  }


  /**
   * Model RecursionPath
   */

  export type AggregateRecursionPath = {
    _count: RecursionPathCountAggregateOutputType | null
    _avg: RecursionPathAvgAggregateOutputType | null
    _sum: RecursionPathSumAggregateOutputType | null
    _min: RecursionPathMinAggregateOutputType | null
    _max: RecursionPathMaxAggregateOutputType | null
  }

  export type RecursionPathAvgAggregateOutputType = {
    recursionDepth: number | null
    connectionStrength: number | null
    schemaVersion: number | null
  }

  export type RecursionPathSumAggregateOutputType = {
    recursionDepth: number | null
    connectionStrength: number | null
    schemaVersion: number | null
  }

  export type RecursionPathMinAggregateOutputType = {
    id: string | null
    parentId: string | null
    childId: string | null
    recursionDepth: number | null
    connectionStrength: number | null
    createdAt: Date | null
    schemaVersion: number | null
  }

  export type RecursionPathMaxAggregateOutputType = {
    id: string | null
    parentId: string | null
    childId: string | null
    recursionDepth: number | null
    connectionStrength: number | null
    createdAt: Date | null
    schemaVersion: number | null
  }

  export type RecursionPathCountAggregateOutputType = {
    id: number
    parentId: number
    childId: number
    recursionDepth: number
    connectionStrength: number
    createdAt: number
    schemaVersion: number
    _all: number
  }


  export type RecursionPathAvgAggregateInputType = {
    recursionDepth?: true
    connectionStrength?: true
    schemaVersion?: true
  }

  export type RecursionPathSumAggregateInputType = {
    recursionDepth?: true
    connectionStrength?: true
    schemaVersion?: true
  }

  export type RecursionPathMinAggregateInputType = {
    id?: true
    parentId?: true
    childId?: true
    recursionDepth?: true
    connectionStrength?: true
    createdAt?: true
    schemaVersion?: true
  }

  export type RecursionPathMaxAggregateInputType = {
    id?: true
    parentId?: true
    childId?: true
    recursionDepth?: true
    connectionStrength?: true
    createdAt?: true
    schemaVersion?: true
  }

  export type RecursionPathCountAggregateInputType = {
    id?: true
    parentId?: true
    childId?: true
    recursionDepth?: true
    connectionStrength?: true
    createdAt?: true
    schemaVersion?: true
    _all?: true
  }

  export type RecursionPathAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RecursionPath to aggregate.
     */
    where?: RecursionPathWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RecursionPaths to fetch.
     */
    orderBy?: RecursionPathOrderByWithRelationInput | RecursionPathOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RecursionPathWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RecursionPaths from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RecursionPaths.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RecursionPaths
    **/
    _count?: true | RecursionPathCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RecursionPathAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RecursionPathSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RecursionPathMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RecursionPathMaxAggregateInputType
  }

  export type GetRecursionPathAggregateType<T extends RecursionPathAggregateArgs> = {
        [P in keyof T & keyof AggregateRecursionPath]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRecursionPath[P]>
      : GetScalarType<T[P], AggregateRecursionPath[P]>
  }




  export type RecursionPathGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RecursionPathWhereInput
    orderBy?: RecursionPathOrderByWithAggregationInput | RecursionPathOrderByWithAggregationInput[]
    by: RecursionPathScalarFieldEnum[] | RecursionPathScalarFieldEnum
    having?: RecursionPathScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RecursionPathCountAggregateInputType | true
    _avg?: RecursionPathAvgAggregateInputType
    _sum?: RecursionPathSumAggregateInputType
    _min?: RecursionPathMinAggregateInputType
    _max?: RecursionPathMaxAggregateInputType
  }

  export type RecursionPathGroupByOutputType = {
    id: string
    parentId: string
    childId: string
    recursionDepth: number
    connectionStrength: number | null
    createdAt: Date
    schemaVersion: number
    _count: RecursionPathCountAggregateOutputType | null
    _avg: RecursionPathAvgAggregateOutputType | null
    _sum: RecursionPathSumAggregateOutputType | null
    _min: RecursionPathMinAggregateOutputType | null
    _max: RecursionPathMaxAggregateOutputType | null
  }

  type GetRecursionPathGroupByPayload<T extends RecursionPathGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RecursionPathGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RecursionPathGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RecursionPathGroupByOutputType[P]>
            : GetScalarType<T[P], RecursionPathGroupByOutputType[P]>
        }
      >
    >


  export type RecursionPathSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    parentId?: boolean
    childId?: boolean
    recursionDepth?: boolean
    connectionStrength?: boolean
    createdAt?: boolean
    schemaVersion?: boolean
  }, ExtArgs["result"]["recursionPath"]>

  export type RecursionPathSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    parentId?: boolean
    childId?: boolean
    recursionDepth?: boolean
    connectionStrength?: boolean
    createdAt?: boolean
    schemaVersion?: boolean
  }, ExtArgs["result"]["recursionPath"]>

  export type RecursionPathSelectScalar = {
    id?: boolean
    parentId?: boolean
    childId?: boolean
    recursionDepth?: boolean
    connectionStrength?: boolean
    createdAt?: boolean
    schemaVersion?: boolean
  }


  export type $RecursionPathPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RecursionPath"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      parentId: string
      childId: string
      recursionDepth: number
      connectionStrength: number | null
      createdAt: Date
      schemaVersion: number
    }, ExtArgs["result"]["recursionPath"]>
    composites: {}
  }

  type RecursionPathGetPayload<S extends boolean | null | undefined | RecursionPathDefaultArgs> = $Result.GetResult<Prisma.$RecursionPathPayload, S>

  type RecursionPathCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RecursionPathFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RecursionPathCountAggregateInputType | true
    }

  export interface RecursionPathDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RecursionPath'], meta: { name: 'RecursionPath' } }
    /**
     * Find zero or one RecursionPath that matches the filter.
     * @param {RecursionPathFindUniqueArgs} args - Arguments to find a RecursionPath
     * @example
     * // Get one RecursionPath
     * const recursionPath = await prisma.recursionPath.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RecursionPathFindUniqueArgs>(args: SelectSubset<T, RecursionPathFindUniqueArgs<ExtArgs>>): Prisma__RecursionPathClient<$Result.GetResult<Prisma.$RecursionPathPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one RecursionPath that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {RecursionPathFindUniqueOrThrowArgs} args - Arguments to find a RecursionPath
     * @example
     * // Get one RecursionPath
     * const recursionPath = await prisma.recursionPath.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RecursionPathFindUniqueOrThrowArgs>(args: SelectSubset<T, RecursionPathFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RecursionPathClient<$Result.GetResult<Prisma.$RecursionPathPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first RecursionPath that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecursionPathFindFirstArgs} args - Arguments to find a RecursionPath
     * @example
     * // Get one RecursionPath
     * const recursionPath = await prisma.recursionPath.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RecursionPathFindFirstArgs>(args?: SelectSubset<T, RecursionPathFindFirstArgs<ExtArgs>>): Prisma__RecursionPathClient<$Result.GetResult<Prisma.$RecursionPathPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first RecursionPath that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecursionPathFindFirstOrThrowArgs} args - Arguments to find a RecursionPath
     * @example
     * // Get one RecursionPath
     * const recursionPath = await prisma.recursionPath.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RecursionPathFindFirstOrThrowArgs>(args?: SelectSubset<T, RecursionPathFindFirstOrThrowArgs<ExtArgs>>): Prisma__RecursionPathClient<$Result.GetResult<Prisma.$RecursionPathPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more RecursionPaths that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecursionPathFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RecursionPaths
     * const recursionPaths = await prisma.recursionPath.findMany()
     * 
     * // Get first 10 RecursionPaths
     * const recursionPaths = await prisma.recursionPath.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const recursionPathWithIdOnly = await prisma.recursionPath.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RecursionPathFindManyArgs>(args?: SelectSubset<T, RecursionPathFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecursionPathPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a RecursionPath.
     * @param {RecursionPathCreateArgs} args - Arguments to create a RecursionPath.
     * @example
     * // Create one RecursionPath
     * const RecursionPath = await prisma.recursionPath.create({
     *   data: {
     *     // ... data to create a RecursionPath
     *   }
     * })
     * 
     */
    create<T extends RecursionPathCreateArgs>(args: SelectSubset<T, RecursionPathCreateArgs<ExtArgs>>): Prisma__RecursionPathClient<$Result.GetResult<Prisma.$RecursionPathPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many RecursionPaths.
     * @param {RecursionPathCreateManyArgs} args - Arguments to create many RecursionPaths.
     * @example
     * // Create many RecursionPaths
     * const recursionPath = await prisma.recursionPath.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RecursionPathCreateManyArgs>(args?: SelectSubset<T, RecursionPathCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RecursionPaths and returns the data saved in the database.
     * @param {RecursionPathCreateManyAndReturnArgs} args - Arguments to create many RecursionPaths.
     * @example
     * // Create many RecursionPaths
     * const recursionPath = await prisma.recursionPath.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RecursionPaths and only return the `id`
     * const recursionPathWithIdOnly = await prisma.recursionPath.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RecursionPathCreateManyAndReturnArgs>(args?: SelectSubset<T, RecursionPathCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecursionPathPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a RecursionPath.
     * @param {RecursionPathDeleteArgs} args - Arguments to delete one RecursionPath.
     * @example
     * // Delete one RecursionPath
     * const RecursionPath = await prisma.recursionPath.delete({
     *   where: {
     *     // ... filter to delete one RecursionPath
     *   }
     * })
     * 
     */
    delete<T extends RecursionPathDeleteArgs>(args: SelectSubset<T, RecursionPathDeleteArgs<ExtArgs>>): Prisma__RecursionPathClient<$Result.GetResult<Prisma.$RecursionPathPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one RecursionPath.
     * @param {RecursionPathUpdateArgs} args - Arguments to update one RecursionPath.
     * @example
     * // Update one RecursionPath
     * const recursionPath = await prisma.recursionPath.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RecursionPathUpdateArgs>(args: SelectSubset<T, RecursionPathUpdateArgs<ExtArgs>>): Prisma__RecursionPathClient<$Result.GetResult<Prisma.$RecursionPathPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more RecursionPaths.
     * @param {RecursionPathDeleteManyArgs} args - Arguments to filter RecursionPaths to delete.
     * @example
     * // Delete a few RecursionPaths
     * const { count } = await prisma.recursionPath.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RecursionPathDeleteManyArgs>(args?: SelectSubset<T, RecursionPathDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RecursionPaths.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecursionPathUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RecursionPaths
     * const recursionPath = await prisma.recursionPath.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RecursionPathUpdateManyArgs>(args: SelectSubset<T, RecursionPathUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one RecursionPath.
     * @param {RecursionPathUpsertArgs} args - Arguments to update or create a RecursionPath.
     * @example
     * // Update or create a RecursionPath
     * const recursionPath = await prisma.recursionPath.upsert({
     *   create: {
     *     // ... data to create a RecursionPath
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RecursionPath we want to update
     *   }
     * })
     */
    upsert<T extends RecursionPathUpsertArgs>(args: SelectSubset<T, RecursionPathUpsertArgs<ExtArgs>>): Prisma__RecursionPathClient<$Result.GetResult<Prisma.$RecursionPathPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of RecursionPaths.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecursionPathCountArgs} args - Arguments to filter RecursionPaths to count.
     * @example
     * // Count the number of RecursionPaths
     * const count = await prisma.recursionPath.count({
     *   where: {
     *     // ... the filter for the RecursionPaths we want to count
     *   }
     * })
    **/
    count<T extends RecursionPathCountArgs>(
      args?: Subset<T, RecursionPathCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RecursionPathCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RecursionPath.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecursionPathAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RecursionPathAggregateArgs>(args: Subset<T, RecursionPathAggregateArgs>): Prisma.PrismaPromise<GetRecursionPathAggregateType<T>>

    /**
     * Group by RecursionPath.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecursionPathGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RecursionPathGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RecursionPathGroupByArgs['orderBy'] }
        : { orderBy?: RecursionPathGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RecursionPathGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRecursionPathGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RecursionPath model
   */
  readonly fields: RecursionPathFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RecursionPath.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RecursionPathClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RecursionPath model
   */ 
  interface RecursionPathFieldRefs {
    readonly id: FieldRef<"RecursionPath", 'String'>
    readonly parentId: FieldRef<"RecursionPath", 'String'>
    readonly childId: FieldRef<"RecursionPath", 'String'>
    readonly recursionDepth: FieldRef<"RecursionPath", 'Int'>
    readonly connectionStrength: FieldRef<"RecursionPath", 'Float'>
    readonly createdAt: FieldRef<"RecursionPath", 'DateTime'>
    readonly schemaVersion: FieldRef<"RecursionPath", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * RecursionPath findUnique
   */
  export type RecursionPathFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecursionPath
     */
    select?: RecursionPathSelect<ExtArgs> | null
    /**
     * Filter, which RecursionPath to fetch.
     */
    where: RecursionPathWhereUniqueInput
  }

  /**
   * RecursionPath findUniqueOrThrow
   */
  export type RecursionPathFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecursionPath
     */
    select?: RecursionPathSelect<ExtArgs> | null
    /**
     * Filter, which RecursionPath to fetch.
     */
    where: RecursionPathWhereUniqueInput
  }

  /**
   * RecursionPath findFirst
   */
  export type RecursionPathFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecursionPath
     */
    select?: RecursionPathSelect<ExtArgs> | null
    /**
     * Filter, which RecursionPath to fetch.
     */
    where?: RecursionPathWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RecursionPaths to fetch.
     */
    orderBy?: RecursionPathOrderByWithRelationInput | RecursionPathOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RecursionPaths.
     */
    cursor?: RecursionPathWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RecursionPaths from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RecursionPaths.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RecursionPaths.
     */
    distinct?: RecursionPathScalarFieldEnum | RecursionPathScalarFieldEnum[]
  }

  /**
   * RecursionPath findFirstOrThrow
   */
  export type RecursionPathFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecursionPath
     */
    select?: RecursionPathSelect<ExtArgs> | null
    /**
     * Filter, which RecursionPath to fetch.
     */
    where?: RecursionPathWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RecursionPaths to fetch.
     */
    orderBy?: RecursionPathOrderByWithRelationInput | RecursionPathOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RecursionPaths.
     */
    cursor?: RecursionPathWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RecursionPaths from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RecursionPaths.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RecursionPaths.
     */
    distinct?: RecursionPathScalarFieldEnum | RecursionPathScalarFieldEnum[]
  }

  /**
   * RecursionPath findMany
   */
  export type RecursionPathFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecursionPath
     */
    select?: RecursionPathSelect<ExtArgs> | null
    /**
     * Filter, which RecursionPaths to fetch.
     */
    where?: RecursionPathWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RecursionPaths to fetch.
     */
    orderBy?: RecursionPathOrderByWithRelationInput | RecursionPathOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RecursionPaths.
     */
    cursor?: RecursionPathWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RecursionPaths from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RecursionPaths.
     */
    skip?: number
    distinct?: RecursionPathScalarFieldEnum | RecursionPathScalarFieldEnum[]
  }

  /**
   * RecursionPath create
   */
  export type RecursionPathCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecursionPath
     */
    select?: RecursionPathSelect<ExtArgs> | null
    /**
     * The data needed to create a RecursionPath.
     */
    data: XOR<RecursionPathCreateInput, RecursionPathUncheckedCreateInput>
  }

  /**
   * RecursionPath createMany
   */
  export type RecursionPathCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RecursionPaths.
     */
    data: RecursionPathCreateManyInput | RecursionPathCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RecursionPath createManyAndReturn
   */
  export type RecursionPathCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecursionPath
     */
    select?: RecursionPathSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many RecursionPaths.
     */
    data: RecursionPathCreateManyInput | RecursionPathCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RecursionPath update
   */
  export type RecursionPathUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecursionPath
     */
    select?: RecursionPathSelect<ExtArgs> | null
    /**
     * The data needed to update a RecursionPath.
     */
    data: XOR<RecursionPathUpdateInput, RecursionPathUncheckedUpdateInput>
    /**
     * Choose, which RecursionPath to update.
     */
    where: RecursionPathWhereUniqueInput
  }

  /**
   * RecursionPath updateMany
   */
  export type RecursionPathUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RecursionPaths.
     */
    data: XOR<RecursionPathUpdateManyMutationInput, RecursionPathUncheckedUpdateManyInput>
    /**
     * Filter which RecursionPaths to update
     */
    where?: RecursionPathWhereInput
  }

  /**
   * RecursionPath upsert
   */
  export type RecursionPathUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecursionPath
     */
    select?: RecursionPathSelect<ExtArgs> | null
    /**
     * The filter to search for the RecursionPath to update in case it exists.
     */
    where: RecursionPathWhereUniqueInput
    /**
     * In case the RecursionPath found by the `where` argument doesn't exist, create a new RecursionPath with this data.
     */
    create: XOR<RecursionPathCreateInput, RecursionPathUncheckedCreateInput>
    /**
     * In case the RecursionPath was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RecursionPathUpdateInput, RecursionPathUncheckedUpdateInput>
  }

  /**
   * RecursionPath delete
   */
  export type RecursionPathDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecursionPath
     */
    select?: RecursionPathSelect<ExtArgs> | null
    /**
     * Filter which RecursionPath to delete.
     */
    where: RecursionPathWhereUniqueInput
  }

  /**
   * RecursionPath deleteMany
   */
  export type RecursionPathDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RecursionPaths to delete
     */
    where?: RecursionPathWhereInput
  }

  /**
   * RecursionPath without action
   */
  export type RecursionPathDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecursionPath
     */
    select?: RecursionPathSelect<ExtArgs> | null
  }


  /**
   * Model ConsciousnessField
   */

  export type AggregateConsciousnessField = {
    _count: ConsciousnessFieldCountAggregateOutputType | null
    _avg: ConsciousnessFieldAvgAggregateOutputType | null
    _sum: ConsciousnessFieldSumAggregateOutputType | null
    _min: ConsciousnessFieldMinAggregateOutputType | null
    _max: ConsciousnessFieldMaxAggregateOutputType | null
  }

  export type ConsciousnessFieldAvgAggregateOutputType = {
    recursionDepth: number | null
    fieldStrength: number | null
    schemaVersion: number | null
  }

  export type ConsciousnessFieldSumAggregateOutputType = {
    recursionDepth: number | null
    fieldStrength: number | null
    schemaVersion: number | null
  }

  export type ConsciousnessFieldMinAggregateOutputType = {
    id: string | null
    parentId: string | null
    childId: string | null
    recursionDepth: number | null
    fieldStrength: number | null
    createdAt: Date | null
    schemaVersion: number | null
  }

  export type ConsciousnessFieldMaxAggregateOutputType = {
    id: string | null
    parentId: string | null
    childId: string | null
    recursionDepth: number | null
    fieldStrength: number | null
    createdAt: Date | null
    schemaVersion: number | null
  }

  export type ConsciousnessFieldCountAggregateOutputType = {
    id: number
    parentId: number
    childId: number
    recursionDepth: number
    fieldStrength: number
    createdAt: number
    schemaVersion: number
    _all: number
  }


  export type ConsciousnessFieldAvgAggregateInputType = {
    recursionDepth?: true
    fieldStrength?: true
    schemaVersion?: true
  }

  export type ConsciousnessFieldSumAggregateInputType = {
    recursionDepth?: true
    fieldStrength?: true
    schemaVersion?: true
  }

  export type ConsciousnessFieldMinAggregateInputType = {
    id?: true
    parentId?: true
    childId?: true
    recursionDepth?: true
    fieldStrength?: true
    createdAt?: true
    schemaVersion?: true
  }

  export type ConsciousnessFieldMaxAggregateInputType = {
    id?: true
    parentId?: true
    childId?: true
    recursionDepth?: true
    fieldStrength?: true
    createdAt?: true
    schemaVersion?: true
  }

  export type ConsciousnessFieldCountAggregateInputType = {
    id?: true
    parentId?: true
    childId?: true
    recursionDepth?: true
    fieldStrength?: true
    createdAt?: true
    schemaVersion?: true
    _all?: true
  }

  export type ConsciousnessFieldAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ConsciousnessField to aggregate.
     */
    where?: ConsciousnessFieldWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ConsciousnessFields to fetch.
     */
    orderBy?: ConsciousnessFieldOrderByWithRelationInput | ConsciousnessFieldOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ConsciousnessFieldWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ConsciousnessFields from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ConsciousnessFields.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ConsciousnessFields
    **/
    _count?: true | ConsciousnessFieldCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ConsciousnessFieldAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ConsciousnessFieldSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ConsciousnessFieldMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ConsciousnessFieldMaxAggregateInputType
  }

  export type GetConsciousnessFieldAggregateType<T extends ConsciousnessFieldAggregateArgs> = {
        [P in keyof T & keyof AggregateConsciousnessField]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateConsciousnessField[P]>
      : GetScalarType<T[P], AggregateConsciousnessField[P]>
  }




  export type ConsciousnessFieldGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConsciousnessFieldWhereInput
    orderBy?: ConsciousnessFieldOrderByWithAggregationInput | ConsciousnessFieldOrderByWithAggregationInput[]
    by: ConsciousnessFieldScalarFieldEnum[] | ConsciousnessFieldScalarFieldEnum
    having?: ConsciousnessFieldScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ConsciousnessFieldCountAggregateInputType | true
    _avg?: ConsciousnessFieldAvgAggregateInputType
    _sum?: ConsciousnessFieldSumAggregateInputType
    _min?: ConsciousnessFieldMinAggregateInputType
    _max?: ConsciousnessFieldMaxAggregateInputType
  }

  export type ConsciousnessFieldGroupByOutputType = {
    id: string
    parentId: string
    childId: string
    recursionDepth: number
    fieldStrength: number | null
    createdAt: Date
    schemaVersion: number
    _count: ConsciousnessFieldCountAggregateOutputType | null
    _avg: ConsciousnessFieldAvgAggregateOutputType | null
    _sum: ConsciousnessFieldSumAggregateOutputType | null
    _min: ConsciousnessFieldMinAggregateOutputType | null
    _max: ConsciousnessFieldMaxAggregateOutputType | null
  }

  type GetConsciousnessFieldGroupByPayload<T extends ConsciousnessFieldGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ConsciousnessFieldGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ConsciousnessFieldGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ConsciousnessFieldGroupByOutputType[P]>
            : GetScalarType<T[P], ConsciousnessFieldGroupByOutputType[P]>
        }
      >
    >


  export type ConsciousnessFieldSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    parentId?: boolean
    childId?: boolean
    recursionDepth?: boolean
    fieldStrength?: boolean
    createdAt?: boolean
    schemaVersion?: boolean
  }, ExtArgs["result"]["consciousnessField"]>

  export type ConsciousnessFieldSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    parentId?: boolean
    childId?: boolean
    recursionDepth?: boolean
    fieldStrength?: boolean
    createdAt?: boolean
    schemaVersion?: boolean
  }, ExtArgs["result"]["consciousnessField"]>

  export type ConsciousnessFieldSelectScalar = {
    id?: boolean
    parentId?: boolean
    childId?: boolean
    recursionDepth?: boolean
    fieldStrength?: boolean
    createdAt?: boolean
    schemaVersion?: boolean
  }


  export type $ConsciousnessFieldPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ConsciousnessField"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      parentId: string
      childId: string
      recursionDepth: number
      fieldStrength: number | null
      createdAt: Date
      schemaVersion: number
    }, ExtArgs["result"]["consciousnessField"]>
    composites: {}
  }

  type ConsciousnessFieldGetPayload<S extends boolean | null | undefined | ConsciousnessFieldDefaultArgs> = $Result.GetResult<Prisma.$ConsciousnessFieldPayload, S>

  type ConsciousnessFieldCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ConsciousnessFieldFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ConsciousnessFieldCountAggregateInputType | true
    }

  export interface ConsciousnessFieldDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ConsciousnessField'], meta: { name: 'ConsciousnessField' } }
    /**
     * Find zero or one ConsciousnessField that matches the filter.
     * @param {ConsciousnessFieldFindUniqueArgs} args - Arguments to find a ConsciousnessField
     * @example
     * // Get one ConsciousnessField
     * const consciousnessField = await prisma.consciousnessField.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ConsciousnessFieldFindUniqueArgs>(args: SelectSubset<T, ConsciousnessFieldFindUniqueArgs<ExtArgs>>): Prisma__ConsciousnessFieldClient<$Result.GetResult<Prisma.$ConsciousnessFieldPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ConsciousnessField that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ConsciousnessFieldFindUniqueOrThrowArgs} args - Arguments to find a ConsciousnessField
     * @example
     * // Get one ConsciousnessField
     * const consciousnessField = await prisma.consciousnessField.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ConsciousnessFieldFindUniqueOrThrowArgs>(args: SelectSubset<T, ConsciousnessFieldFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ConsciousnessFieldClient<$Result.GetResult<Prisma.$ConsciousnessFieldPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ConsciousnessField that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsciousnessFieldFindFirstArgs} args - Arguments to find a ConsciousnessField
     * @example
     * // Get one ConsciousnessField
     * const consciousnessField = await prisma.consciousnessField.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ConsciousnessFieldFindFirstArgs>(args?: SelectSubset<T, ConsciousnessFieldFindFirstArgs<ExtArgs>>): Prisma__ConsciousnessFieldClient<$Result.GetResult<Prisma.$ConsciousnessFieldPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ConsciousnessField that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsciousnessFieldFindFirstOrThrowArgs} args - Arguments to find a ConsciousnessField
     * @example
     * // Get one ConsciousnessField
     * const consciousnessField = await prisma.consciousnessField.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ConsciousnessFieldFindFirstOrThrowArgs>(args?: SelectSubset<T, ConsciousnessFieldFindFirstOrThrowArgs<ExtArgs>>): Prisma__ConsciousnessFieldClient<$Result.GetResult<Prisma.$ConsciousnessFieldPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ConsciousnessFields that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsciousnessFieldFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ConsciousnessFields
     * const consciousnessFields = await prisma.consciousnessField.findMany()
     * 
     * // Get first 10 ConsciousnessFields
     * const consciousnessFields = await prisma.consciousnessField.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const consciousnessFieldWithIdOnly = await prisma.consciousnessField.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ConsciousnessFieldFindManyArgs>(args?: SelectSubset<T, ConsciousnessFieldFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConsciousnessFieldPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ConsciousnessField.
     * @param {ConsciousnessFieldCreateArgs} args - Arguments to create a ConsciousnessField.
     * @example
     * // Create one ConsciousnessField
     * const ConsciousnessField = await prisma.consciousnessField.create({
     *   data: {
     *     // ... data to create a ConsciousnessField
     *   }
     * })
     * 
     */
    create<T extends ConsciousnessFieldCreateArgs>(args: SelectSubset<T, ConsciousnessFieldCreateArgs<ExtArgs>>): Prisma__ConsciousnessFieldClient<$Result.GetResult<Prisma.$ConsciousnessFieldPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ConsciousnessFields.
     * @param {ConsciousnessFieldCreateManyArgs} args - Arguments to create many ConsciousnessFields.
     * @example
     * // Create many ConsciousnessFields
     * const consciousnessField = await prisma.consciousnessField.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ConsciousnessFieldCreateManyArgs>(args?: SelectSubset<T, ConsciousnessFieldCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ConsciousnessFields and returns the data saved in the database.
     * @param {ConsciousnessFieldCreateManyAndReturnArgs} args - Arguments to create many ConsciousnessFields.
     * @example
     * // Create many ConsciousnessFields
     * const consciousnessField = await prisma.consciousnessField.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ConsciousnessFields and only return the `id`
     * const consciousnessFieldWithIdOnly = await prisma.consciousnessField.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ConsciousnessFieldCreateManyAndReturnArgs>(args?: SelectSubset<T, ConsciousnessFieldCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConsciousnessFieldPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ConsciousnessField.
     * @param {ConsciousnessFieldDeleteArgs} args - Arguments to delete one ConsciousnessField.
     * @example
     * // Delete one ConsciousnessField
     * const ConsciousnessField = await prisma.consciousnessField.delete({
     *   where: {
     *     // ... filter to delete one ConsciousnessField
     *   }
     * })
     * 
     */
    delete<T extends ConsciousnessFieldDeleteArgs>(args: SelectSubset<T, ConsciousnessFieldDeleteArgs<ExtArgs>>): Prisma__ConsciousnessFieldClient<$Result.GetResult<Prisma.$ConsciousnessFieldPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ConsciousnessField.
     * @param {ConsciousnessFieldUpdateArgs} args - Arguments to update one ConsciousnessField.
     * @example
     * // Update one ConsciousnessField
     * const consciousnessField = await prisma.consciousnessField.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ConsciousnessFieldUpdateArgs>(args: SelectSubset<T, ConsciousnessFieldUpdateArgs<ExtArgs>>): Prisma__ConsciousnessFieldClient<$Result.GetResult<Prisma.$ConsciousnessFieldPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ConsciousnessFields.
     * @param {ConsciousnessFieldDeleteManyArgs} args - Arguments to filter ConsciousnessFields to delete.
     * @example
     * // Delete a few ConsciousnessFields
     * const { count } = await prisma.consciousnessField.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ConsciousnessFieldDeleteManyArgs>(args?: SelectSubset<T, ConsciousnessFieldDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ConsciousnessFields.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsciousnessFieldUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ConsciousnessFields
     * const consciousnessField = await prisma.consciousnessField.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ConsciousnessFieldUpdateManyArgs>(args: SelectSubset<T, ConsciousnessFieldUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ConsciousnessField.
     * @param {ConsciousnessFieldUpsertArgs} args - Arguments to update or create a ConsciousnessField.
     * @example
     * // Update or create a ConsciousnessField
     * const consciousnessField = await prisma.consciousnessField.upsert({
     *   create: {
     *     // ... data to create a ConsciousnessField
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ConsciousnessField we want to update
     *   }
     * })
     */
    upsert<T extends ConsciousnessFieldUpsertArgs>(args: SelectSubset<T, ConsciousnessFieldUpsertArgs<ExtArgs>>): Prisma__ConsciousnessFieldClient<$Result.GetResult<Prisma.$ConsciousnessFieldPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ConsciousnessFields.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsciousnessFieldCountArgs} args - Arguments to filter ConsciousnessFields to count.
     * @example
     * // Count the number of ConsciousnessFields
     * const count = await prisma.consciousnessField.count({
     *   where: {
     *     // ... the filter for the ConsciousnessFields we want to count
     *   }
     * })
    **/
    count<T extends ConsciousnessFieldCountArgs>(
      args?: Subset<T, ConsciousnessFieldCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ConsciousnessFieldCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ConsciousnessField.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsciousnessFieldAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ConsciousnessFieldAggregateArgs>(args: Subset<T, ConsciousnessFieldAggregateArgs>): Prisma.PrismaPromise<GetConsciousnessFieldAggregateType<T>>

    /**
     * Group by ConsciousnessField.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsciousnessFieldGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ConsciousnessFieldGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ConsciousnessFieldGroupByArgs['orderBy'] }
        : { orderBy?: ConsciousnessFieldGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ConsciousnessFieldGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetConsciousnessFieldGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ConsciousnessField model
   */
  readonly fields: ConsciousnessFieldFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ConsciousnessField.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ConsciousnessFieldClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ConsciousnessField model
   */ 
  interface ConsciousnessFieldFieldRefs {
    readonly id: FieldRef<"ConsciousnessField", 'String'>
    readonly parentId: FieldRef<"ConsciousnessField", 'String'>
    readonly childId: FieldRef<"ConsciousnessField", 'String'>
    readonly recursionDepth: FieldRef<"ConsciousnessField", 'Int'>
    readonly fieldStrength: FieldRef<"ConsciousnessField", 'Float'>
    readonly createdAt: FieldRef<"ConsciousnessField", 'DateTime'>
    readonly schemaVersion: FieldRef<"ConsciousnessField", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * ConsciousnessField findUnique
   */
  export type ConsciousnessFieldFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsciousnessField
     */
    select?: ConsciousnessFieldSelect<ExtArgs> | null
    /**
     * Filter, which ConsciousnessField to fetch.
     */
    where: ConsciousnessFieldWhereUniqueInput
  }

  /**
   * ConsciousnessField findUniqueOrThrow
   */
  export type ConsciousnessFieldFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsciousnessField
     */
    select?: ConsciousnessFieldSelect<ExtArgs> | null
    /**
     * Filter, which ConsciousnessField to fetch.
     */
    where: ConsciousnessFieldWhereUniqueInput
  }

  /**
   * ConsciousnessField findFirst
   */
  export type ConsciousnessFieldFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsciousnessField
     */
    select?: ConsciousnessFieldSelect<ExtArgs> | null
    /**
     * Filter, which ConsciousnessField to fetch.
     */
    where?: ConsciousnessFieldWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ConsciousnessFields to fetch.
     */
    orderBy?: ConsciousnessFieldOrderByWithRelationInput | ConsciousnessFieldOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ConsciousnessFields.
     */
    cursor?: ConsciousnessFieldWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ConsciousnessFields from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ConsciousnessFields.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ConsciousnessFields.
     */
    distinct?: ConsciousnessFieldScalarFieldEnum | ConsciousnessFieldScalarFieldEnum[]
  }

  /**
   * ConsciousnessField findFirstOrThrow
   */
  export type ConsciousnessFieldFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsciousnessField
     */
    select?: ConsciousnessFieldSelect<ExtArgs> | null
    /**
     * Filter, which ConsciousnessField to fetch.
     */
    where?: ConsciousnessFieldWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ConsciousnessFields to fetch.
     */
    orderBy?: ConsciousnessFieldOrderByWithRelationInput | ConsciousnessFieldOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ConsciousnessFields.
     */
    cursor?: ConsciousnessFieldWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ConsciousnessFields from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ConsciousnessFields.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ConsciousnessFields.
     */
    distinct?: ConsciousnessFieldScalarFieldEnum | ConsciousnessFieldScalarFieldEnum[]
  }

  /**
   * ConsciousnessField findMany
   */
  export type ConsciousnessFieldFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsciousnessField
     */
    select?: ConsciousnessFieldSelect<ExtArgs> | null
    /**
     * Filter, which ConsciousnessFields to fetch.
     */
    where?: ConsciousnessFieldWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ConsciousnessFields to fetch.
     */
    orderBy?: ConsciousnessFieldOrderByWithRelationInput | ConsciousnessFieldOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ConsciousnessFields.
     */
    cursor?: ConsciousnessFieldWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ConsciousnessFields from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ConsciousnessFields.
     */
    skip?: number
    distinct?: ConsciousnessFieldScalarFieldEnum | ConsciousnessFieldScalarFieldEnum[]
  }

  /**
   * ConsciousnessField create
   */
  export type ConsciousnessFieldCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsciousnessField
     */
    select?: ConsciousnessFieldSelect<ExtArgs> | null
    /**
     * The data needed to create a ConsciousnessField.
     */
    data: XOR<ConsciousnessFieldCreateInput, ConsciousnessFieldUncheckedCreateInput>
  }

  /**
   * ConsciousnessField createMany
   */
  export type ConsciousnessFieldCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ConsciousnessFields.
     */
    data: ConsciousnessFieldCreateManyInput | ConsciousnessFieldCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ConsciousnessField createManyAndReturn
   */
  export type ConsciousnessFieldCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsciousnessField
     */
    select?: ConsciousnessFieldSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ConsciousnessFields.
     */
    data: ConsciousnessFieldCreateManyInput | ConsciousnessFieldCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ConsciousnessField update
   */
  export type ConsciousnessFieldUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsciousnessField
     */
    select?: ConsciousnessFieldSelect<ExtArgs> | null
    /**
     * The data needed to update a ConsciousnessField.
     */
    data: XOR<ConsciousnessFieldUpdateInput, ConsciousnessFieldUncheckedUpdateInput>
    /**
     * Choose, which ConsciousnessField to update.
     */
    where: ConsciousnessFieldWhereUniqueInput
  }

  /**
   * ConsciousnessField updateMany
   */
  export type ConsciousnessFieldUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ConsciousnessFields.
     */
    data: XOR<ConsciousnessFieldUpdateManyMutationInput, ConsciousnessFieldUncheckedUpdateManyInput>
    /**
     * Filter which ConsciousnessFields to update
     */
    where?: ConsciousnessFieldWhereInput
  }

  /**
   * ConsciousnessField upsert
   */
  export type ConsciousnessFieldUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsciousnessField
     */
    select?: ConsciousnessFieldSelect<ExtArgs> | null
    /**
     * The filter to search for the ConsciousnessField to update in case it exists.
     */
    where: ConsciousnessFieldWhereUniqueInput
    /**
     * In case the ConsciousnessField found by the `where` argument doesn't exist, create a new ConsciousnessField with this data.
     */
    create: XOR<ConsciousnessFieldCreateInput, ConsciousnessFieldUncheckedCreateInput>
    /**
     * In case the ConsciousnessField was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ConsciousnessFieldUpdateInput, ConsciousnessFieldUncheckedUpdateInput>
  }

  /**
   * ConsciousnessField delete
   */
  export type ConsciousnessFieldDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsciousnessField
     */
    select?: ConsciousnessFieldSelect<ExtArgs> | null
    /**
     * Filter which ConsciousnessField to delete.
     */
    where: ConsciousnessFieldWhereUniqueInput
  }

  /**
   * ConsciousnessField deleteMany
   */
  export type ConsciousnessFieldDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ConsciousnessFields to delete
     */
    where?: ConsciousnessFieldWhereInput
  }

  /**
   * ConsciousnessField without action
   */
  export type ConsciousnessFieldDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsciousnessField
     */
    select?: ConsciousnessFieldSelect<ExtArgs> | null
  }


  /**
   * Model Metric
   */

  export type AggregateMetric = {
    _count: MetricCountAggregateOutputType | null
    _avg: MetricAvgAggregateOutputType | null
    _sum: MetricSumAggregateOutputType | null
    _min: MetricMinAggregateOutputType | null
    _max: MetricMaxAggregateOutputType | null
  }

  export type MetricAvgAggregateOutputType = {
    value: number | null
  }

  export type MetricSumAggregateOutputType = {
    value: number | null
  }

  export type MetricMinAggregateOutputType = {
    key: string | null
    value: number | null
  }

  export type MetricMaxAggregateOutputType = {
    key: string | null
    value: number | null
  }

  export type MetricCountAggregateOutputType = {
    key: number
    value: number
    _all: number
  }


  export type MetricAvgAggregateInputType = {
    value?: true
  }

  export type MetricSumAggregateInputType = {
    value?: true
  }

  export type MetricMinAggregateInputType = {
    key?: true
    value?: true
  }

  export type MetricMaxAggregateInputType = {
    key?: true
    value?: true
  }

  export type MetricCountAggregateInputType = {
    key?: true
    value?: true
    _all?: true
  }

  export type MetricAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Metric to aggregate.
     */
    where?: MetricWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Metrics to fetch.
     */
    orderBy?: MetricOrderByWithRelationInput | MetricOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MetricWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Metrics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Metrics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Metrics
    **/
    _count?: true | MetricCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MetricAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MetricSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MetricMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MetricMaxAggregateInputType
  }

  export type GetMetricAggregateType<T extends MetricAggregateArgs> = {
        [P in keyof T & keyof AggregateMetric]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMetric[P]>
      : GetScalarType<T[P], AggregateMetric[P]>
  }




  export type MetricGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MetricWhereInput
    orderBy?: MetricOrderByWithAggregationInput | MetricOrderByWithAggregationInput[]
    by: MetricScalarFieldEnum[] | MetricScalarFieldEnum
    having?: MetricScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MetricCountAggregateInputType | true
    _avg?: MetricAvgAggregateInputType
    _sum?: MetricSumAggregateInputType
    _min?: MetricMinAggregateInputType
    _max?: MetricMaxAggregateInputType
  }

  export type MetricGroupByOutputType = {
    key: string
    value: number
    _count: MetricCountAggregateOutputType | null
    _avg: MetricAvgAggregateOutputType | null
    _sum: MetricSumAggregateOutputType | null
    _min: MetricMinAggregateOutputType | null
    _max: MetricMaxAggregateOutputType | null
  }

  type GetMetricGroupByPayload<T extends MetricGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MetricGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MetricGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MetricGroupByOutputType[P]>
            : GetScalarType<T[P], MetricGroupByOutputType[P]>
        }
      >
    >


  export type MetricSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    key?: boolean
    value?: boolean
  }, ExtArgs["result"]["metric"]>

  export type MetricSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    key?: boolean
    value?: boolean
  }, ExtArgs["result"]["metric"]>

  export type MetricSelectScalar = {
    key?: boolean
    value?: boolean
  }


  export type $MetricPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Metric"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      key: string
      value: number
    }, ExtArgs["result"]["metric"]>
    composites: {}
  }

  type MetricGetPayload<S extends boolean | null | undefined | MetricDefaultArgs> = $Result.GetResult<Prisma.$MetricPayload, S>

  type MetricCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MetricFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MetricCountAggregateInputType | true
    }

  export interface MetricDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Metric'], meta: { name: 'Metric' } }
    /**
     * Find zero or one Metric that matches the filter.
     * @param {MetricFindUniqueArgs} args - Arguments to find a Metric
     * @example
     * // Get one Metric
     * const metric = await prisma.metric.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MetricFindUniqueArgs>(args: SelectSubset<T, MetricFindUniqueArgs<ExtArgs>>): Prisma__MetricClient<$Result.GetResult<Prisma.$MetricPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Metric that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MetricFindUniqueOrThrowArgs} args - Arguments to find a Metric
     * @example
     * // Get one Metric
     * const metric = await prisma.metric.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MetricFindUniqueOrThrowArgs>(args: SelectSubset<T, MetricFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MetricClient<$Result.GetResult<Prisma.$MetricPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Metric that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MetricFindFirstArgs} args - Arguments to find a Metric
     * @example
     * // Get one Metric
     * const metric = await prisma.metric.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MetricFindFirstArgs>(args?: SelectSubset<T, MetricFindFirstArgs<ExtArgs>>): Prisma__MetricClient<$Result.GetResult<Prisma.$MetricPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Metric that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MetricFindFirstOrThrowArgs} args - Arguments to find a Metric
     * @example
     * // Get one Metric
     * const metric = await prisma.metric.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MetricFindFirstOrThrowArgs>(args?: SelectSubset<T, MetricFindFirstOrThrowArgs<ExtArgs>>): Prisma__MetricClient<$Result.GetResult<Prisma.$MetricPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Metrics that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MetricFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Metrics
     * const metrics = await prisma.metric.findMany()
     * 
     * // Get first 10 Metrics
     * const metrics = await prisma.metric.findMany({ take: 10 })
     * 
     * // Only select the `key`
     * const metricWithKeyOnly = await prisma.metric.findMany({ select: { key: true } })
     * 
     */
    findMany<T extends MetricFindManyArgs>(args?: SelectSubset<T, MetricFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MetricPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Metric.
     * @param {MetricCreateArgs} args - Arguments to create a Metric.
     * @example
     * // Create one Metric
     * const Metric = await prisma.metric.create({
     *   data: {
     *     // ... data to create a Metric
     *   }
     * })
     * 
     */
    create<T extends MetricCreateArgs>(args: SelectSubset<T, MetricCreateArgs<ExtArgs>>): Prisma__MetricClient<$Result.GetResult<Prisma.$MetricPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Metrics.
     * @param {MetricCreateManyArgs} args - Arguments to create many Metrics.
     * @example
     * // Create many Metrics
     * const metric = await prisma.metric.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MetricCreateManyArgs>(args?: SelectSubset<T, MetricCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Metrics and returns the data saved in the database.
     * @param {MetricCreateManyAndReturnArgs} args - Arguments to create many Metrics.
     * @example
     * // Create many Metrics
     * const metric = await prisma.metric.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Metrics and only return the `key`
     * const metricWithKeyOnly = await prisma.metric.createManyAndReturn({ 
     *   select: { key: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MetricCreateManyAndReturnArgs>(args?: SelectSubset<T, MetricCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MetricPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Metric.
     * @param {MetricDeleteArgs} args - Arguments to delete one Metric.
     * @example
     * // Delete one Metric
     * const Metric = await prisma.metric.delete({
     *   where: {
     *     // ... filter to delete one Metric
     *   }
     * })
     * 
     */
    delete<T extends MetricDeleteArgs>(args: SelectSubset<T, MetricDeleteArgs<ExtArgs>>): Prisma__MetricClient<$Result.GetResult<Prisma.$MetricPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Metric.
     * @param {MetricUpdateArgs} args - Arguments to update one Metric.
     * @example
     * // Update one Metric
     * const metric = await prisma.metric.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MetricUpdateArgs>(args: SelectSubset<T, MetricUpdateArgs<ExtArgs>>): Prisma__MetricClient<$Result.GetResult<Prisma.$MetricPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Metrics.
     * @param {MetricDeleteManyArgs} args - Arguments to filter Metrics to delete.
     * @example
     * // Delete a few Metrics
     * const { count } = await prisma.metric.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MetricDeleteManyArgs>(args?: SelectSubset<T, MetricDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Metrics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MetricUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Metrics
     * const metric = await prisma.metric.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MetricUpdateManyArgs>(args: SelectSubset<T, MetricUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Metric.
     * @param {MetricUpsertArgs} args - Arguments to update or create a Metric.
     * @example
     * // Update or create a Metric
     * const metric = await prisma.metric.upsert({
     *   create: {
     *     // ... data to create a Metric
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Metric we want to update
     *   }
     * })
     */
    upsert<T extends MetricUpsertArgs>(args: SelectSubset<T, MetricUpsertArgs<ExtArgs>>): Prisma__MetricClient<$Result.GetResult<Prisma.$MetricPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Metrics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MetricCountArgs} args - Arguments to filter Metrics to count.
     * @example
     * // Count the number of Metrics
     * const count = await prisma.metric.count({
     *   where: {
     *     // ... the filter for the Metrics we want to count
     *   }
     * })
    **/
    count<T extends MetricCountArgs>(
      args?: Subset<T, MetricCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MetricCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Metric.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MetricAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MetricAggregateArgs>(args: Subset<T, MetricAggregateArgs>): Prisma.PrismaPromise<GetMetricAggregateType<T>>

    /**
     * Group by Metric.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MetricGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MetricGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MetricGroupByArgs['orderBy'] }
        : { orderBy?: MetricGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MetricGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMetricGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Metric model
   */
  readonly fields: MetricFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Metric.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MetricClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Metric model
   */ 
  interface MetricFieldRefs {
    readonly key: FieldRef<"Metric", 'String'>
    readonly value: FieldRef<"Metric", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * Metric findUnique
   */
  export type MetricFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Metric
     */
    select?: MetricSelect<ExtArgs> | null
    /**
     * Filter, which Metric to fetch.
     */
    where: MetricWhereUniqueInput
  }

  /**
   * Metric findUniqueOrThrow
   */
  export type MetricFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Metric
     */
    select?: MetricSelect<ExtArgs> | null
    /**
     * Filter, which Metric to fetch.
     */
    where: MetricWhereUniqueInput
  }

  /**
   * Metric findFirst
   */
  export type MetricFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Metric
     */
    select?: MetricSelect<ExtArgs> | null
    /**
     * Filter, which Metric to fetch.
     */
    where?: MetricWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Metrics to fetch.
     */
    orderBy?: MetricOrderByWithRelationInput | MetricOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Metrics.
     */
    cursor?: MetricWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Metrics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Metrics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Metrics.
     */
    distinct?: MetricScalarFieldEnum | MetricScalarFieldEnum[]
  }

  /**
   * Metric findFirstOrThrow
   */
  export type MetricFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Metric
     */
    select?: MetricSelect<ExtArgs> | null
    /**
     * Filter, which Metric to fetch.
     */
    where?: MetricWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Metrics to fetch.
     */
    orderBy?: MetricOrderByWithRelationInput | MetricOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Metrics.
     */
    cursor?: MetricWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Metrics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Metrics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Metrics.
     */
    distinct?: MetricScalarFieldEnum | MetricScalarFieldEnum[]
  }

  /**
   * Metric findMany
   */
  export type MetricFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Metric
     */
    select?: MetricSelect<ExtArgs> | null
    /**
     * Filter, which Metrics to fetch.
     */
    where?: MetricWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Metrics to fetch.
     */
    orderBy?: MetricOrderByWithRelationInput | MetricOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Metrics.
     */
    cursor?: MetricWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Metrics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Metrics.
     */
    skip?: number
    distinct?: MetricScalarFieldEnum | MetricScalarFieldEnum[]
  }

  /**
   * Metric create
   */
  export type MetricCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Metric
     */
    select?: MetricSelect<ExtArgs> | null
    /**
     * The data needed to create a Metric.
     */
    data: XOR<MetricCreateInput, MetricUncheckedCreateInput>
  }

  /**
   * Metric createMany
   */
  export type MetricCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Metrics.
     */
    data: MetricCreateManyInput | MetricCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Metric createManyAndReturn
   */
  export type MetricCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Metric
     */
    select?: MetricSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Metrics.
     */
    data: MetricCreateManyInput | MetricCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Metric update
   */
  export type MetricUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Metric
     */
    select?: MetricSelect<ExtArgs> | null
    /**
     * The data needed to update a Metric.
     */
    data: XOR<MetricUpdateInput, MetricUncheckedUpdateInput>
    /**
     * Choose, which Metric to update.
     */
    where: MetricWhereUniqueInput
  }

  /**
   * Metric updateMany
   */
  export type MetricUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Metrics.
     */
    data: XOR<MetricUpdateManyMutationInput, MetricUncheckedUpdateManyInput>
    /**
     * Filter which Metrics to update
     */
    where?: MetricWhereInput
  }

  /**
   * Metric upsert
   */
  export type MetricUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Metric
     */
    select?: MetricSelect<ExtArgs> | null
    /**
     * The filter to search for the Metric to update in case it exists.
     */
    where: MetricWhereUniqueInput
    /**
     * In case the Metric found by the `where` argument doesn't exist, create a new Metric with this data.
     */
    create: XOR<MetricCreateInput, MetricUncheckedCreateInput>
    /**
     * In case the Metric was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MetricUpdateInput, MetricUncheckedUpdateInput>
  }

  /**
   * Metric delete
   */
  export type MetricDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Metric
     */
    select?: MetricSelect<ExtArgs> | null
    /**
     * Filter which Metric to delete.
     */
    where: MetricWhereUniqueInput
  }

  /**
   * Metric deleteMany
   */
  export type MetricDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Metrics to delete
     */
    where?: MetricWhereInput
  }

  /**
   * Metric without action
   */
  export type MetricDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Metric
     */
    select?: MetricSelect<ExtArgs> | null
  }


  /**
   * Model SceneNode
   */

  export type AggregateSceneNode = {
    _count: SceneNodeCountAggregateOutputType | null
    _min: SceneNodeMinAggregateOutputType | null
    _max: SceneNodeMaxAggregateOutputType | null
  }

  export type SceneNodeMinAggregateOutputType = {
    id: string | null
    sceneId: string | null
    type: string | null
    parentId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SceneNodeMaxAggregateOutputType = {
    id: string | null
    sceneId: string | null
    type: string | null
    parentId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SceneNodeCountAggregateOutputType = {
    id: number
    sceneId: number
    type: number
    parentId: number
    payload: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SceneNodeMinAggregateInputType = {
    id?: true
    sceneId?: true
    type?: true
    parentId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SceneNodeMaxAggregateInputType = {
    id?: true
    sceneId?: true
    type?: true
    parentId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SceneNodeCountAggregateInputType = {
    id?: true
    sceneId?: true
    type?: true
    parentId?: true
    payload?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SceneNodeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SceneNode to aggregate.
     */
    where?: SceneNodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SceneNodes to fetch.
     */
    orderBy?: SceneNodeOrderByWithRelationInput | SceneNodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SceneNodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SceneNodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SceneNodes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SceneNodes
    **/
    _count?: true | SceneNodeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SceneNodeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SceneNodeMaxAggregateInputType
  }

  export type GetSceneNodeAggregateType<T extends SceneNodeAggregateArgs> = {
        [P in keyof T & keyof AggregateSceneNode]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSceneNode[P]>
      : GetScalarType<T[P], AggregateSceneNode[P]>
  }




  export type SceneNodeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SceneNodeWhereInput
    orderBy?: SceneNodeOrderByWithAggregationInput | SceneNodeOrderByWithAggregationInput[]
    by: SceneNodeScalarFieldEnum[] | SceneNodeScalarFieldEnum
    having?: SceneNodeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SceneNodeCountAggregateInputType | true
    _min?: SceneNodeMinAggregateInputType
    _max?: SceneNodeMaxAggregateInputType
  }

  export type SceneNodeGroupByOutputType = {
    id: string
    sceneId: string
    type: string
    parentId: string | null
    payload: JsonValue
    createdAt: Date
    updatedAt: Date
    _count: SceneNodeCountAggregateOutputType | null
    _min: SceneNodeMinAggregateOutputType | null
    _max: SceneNodeMaxAggregateOutputType | null
  }

  type GetSceneNodeGroupByPayload<T extends SceneNodeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SceneNodeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SceneNodeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SceneNodeGroupByOutputType[P]>
            : GetScalarType<T[P], SceneNodeGroupByOutputType[P]>
        }
      >
    >


  export type SceneNodeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sceneId?: boolean
    type?: boolean
    parentId?: boolean
    payload?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["sceneNode"]>

  export type SceneNodeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sceneId?: boolean
    type?: boolean
    parentId?: boolean
    payload?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["sceneNode"]>

  export type SceneNodeSelectScalar = {
    id?: boolean
    sceneId?: boolean
    type?: boolean
    parentId?: boolean
    payload?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type $SceneNodePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SceneNode"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      sceneId: string
      type: string
      parentId: string | null
      payload: Prisma.JsonValue
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["sceneNode"]>
    composites: {}
  }

  type SceneNodeGetPayload<S extends boolean | null | undefined | SceneNodeDefaultArgs> = $Result.GetResult<Prisma.$SceneNodePayload, S>

  type SceneNodeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SceneNodeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SceneNodeCountAggregateInputType | true
    }

  export interface SceneNodeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SceneNode'], meta: { name: 'SceneNode' } }
    /**
     * Find zero or one SceneNode that matches the filter.
     * @param {SceneNodeFindUniqueArgs} args - Arguments to find a SceneNode
     * @example
     * // Get one SceneNode
     * const sceneNode = await prisma.sceneNode.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SceneNodeFindUniqueArgs>(args: SelectSubset<T, SceneNodeFindUniqueArgs<ExtArgs>>): Prisma__SceneNodeClient<$Result.GetResult<Prisma.$SceneNodePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one SceneNode that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SceneNodeFindUniqueOrThrowArgs} args - Arguments to find a SceneNode
     * @example
     * // Get one SceneNode
     * const sceneNode = await prisma.sceneNode.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SceneNodeFindUniqueOrThrowArgs>(args: SelectSubset<T, SceneNodeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SceneNodeClient<$Result.GetResult<Prisma.$SceneNodePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first SceneNode that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SceneNodeFindFirstArgs} args - Arguments to find a SceneNode
     * @example
     * // Get one SceneNode
     * const sceneNode = await prisma.sceneNode.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SceneNodeFindFirstArgs>(args?: SelectSubset<T, SceneNodeFindFirstArgs<ExtArgs>>): Prisma__SceneNodeClient<$Result.GetResult<Prisma.$SceneNodePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first SceneNode that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SceneNodeFindFirstOrThrowArgs} args - Arguments to find a SceneNode
     * @example
     * // Get one SceneNode
     * const sceneNode = await prisma.sceneNode.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SceneNodeFindFirstOrThrowArgs>(args?: SelectSubset<T, SceneNodeFindFirstOrThrowArgs<ExtArgs>>): Prisma__SceneNodeClient<$Result.GetResult<Prisma.$SceneNodePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more SceneNodes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SceneNodeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SceneNodes
     * const sceneNodes = await prisma.sceneNode.findMany()
     * 
     * // Get first 10 SceneNodes
     * const sceneNodes = await prisma.sceneNode.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sceneNodeWithIdOnly = await prisma.sceneNode.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SceneNodeFindManyArgs>(args?: SelectSubset<T, SceneNodeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SceneNodePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a SceneNode.
     * @param {SceneNodeCreateArgs} args - Arguments to create a SceneNode.
     * @example
     * // Create one SceneNode
     * const SceneNode = await prisma.sceneNode.create({
     *   data: {
     *     // ... data to create a SceneNode
     *   }
     * })
     * 
     */
    create<T extends SceneNodeCreateArgs>(args: SelectSubset<T, SceneNodeCreateArgs<ExtArgs>>): Prisma__SceneNodeClient<$Result.GetResult<Prisma.$SceneNodePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many SceneNodes.
     * @param {SceneNodeCreateManyArgs} args - Arguments to create many SceneNodes.
     * @example
     * // Create many SceneNodes
     * const sceneNode = await prisma.sceneNode.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SceneNodeCreateManyArgs>(args?: SelectSubset<T, SceneNodeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SceneNodes and returns the data saved in the database.
     * @param {SceneNodeCreateManyAndReturnArgs} args - Arguments to create many SceneNodes.
     * @example
     * // Create many SceneNodes
     * const sceneNode = await prisma.sceneNode.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SceneNodes and only return the `id`
     * const sceneNodeWithIdOnly = await prisma.sceneNode.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SceneNodeCreateManyAndReturnArgs>(args?: SelectSubset<T, SceneNodeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SceneNodePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a SceneNode.
     * @param {SceneNodeDeleteArgs} args - Arguments to delete one SceneNode.
     * @example
     * // Delete one SceneNode
     * const SceneNode = await prisma.sceneNode.delete({
     *   where: {
     *     // ... filter to delete one SceneNode
     *   }
     * })
     * 
     */
    delete<T extends SceneNodeDeleteArgs>(args: SelectSubset<T, SceneNodeDeleteArgs<ExtArgs>>): Prisma__SceneNodeClient<$Result.GetResult<Prisma.$SceneNodePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one SceneNode.
     * @param {SceneNodeUpdateArgs} args - Arguments to update one SceneNode.
     * @example
     * // Update one SceneNode
     * const sceneNode = await prisma.sceneNode.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SceneNodeUpdateArgs>(args: SelectSubset<T, SceneNodeUpdateArgs<ExtArgs>>): Prisma__SceneNodeClient<$Result.GetResult<Prisma.$SceneNodePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more SceneNodes.
     * @param {SceneNodeDeleteManyArgs} args - Arguments to filter SceneNodes to delete.
     * @example
     * // Delete a few SceneNodes
     * const { count } = await prisma.sceneNode.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SceneNodeDeleteManyArgs>(args?: SelectSubset<T, SceneNodeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SceneNodes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SceneNodeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SceneNodes
     * const sceneNode = await prisma.sceneNode.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SceneNodeUpdateManyArgs>(args: SelectSubset<T, SceneNodeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SceneNode.
     * @param {SceneNodeUpsertArgs} args - Arguments to update or create a SceneNode.
     * @example
     * // Update or create a SceneNode
     * const sceneNode = await prisma.sceneNode.upsert({
     *   create: {
     *     // ... data to create a SceneNode
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SceneNode we want to update
     *   }
     * })
     */
    upsert<T extends SceneNodeUpsertArgs>(args: SelectSubset<T, SceneNodeUpsertArgs<ExtArgs>>): Prisma__SceneNodeClient<$Result.GetResult<Prisma.$SceneNodePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of SceneNodes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SceneNodeCountArgs} args - Arguments to filter SceneNodes to count.
     * @example
     * // Count the number of SceneNodes
     * const count = await prisma.sceneNode.count({
     *   where: {
     *     // ... the filter for the SceneNodes we want to count
     *   }
     * })
    **/
    count<T extends SceneNodeCountArgs>(
      args?: Subset<T, SceneNodeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SceneNodeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SceneNode.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SceneNodeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SceneNodeAggregateArgs>(args: Subset<T, SceneNodeAggregateArgs>): Prisma.PrismaPromise<GetSceneNodeAggregateType<T>>

    /**
     * Group by SceneNode.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SceneNodeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SceneNodeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SceneNodeGroupByArgs['orderBy'] }
        : { orderBy?: SceneNodeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SceneNodeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSceneNodeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SceneNode model
   */
  readonly fields: SceneNodeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SceneNode.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SceneNodeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SceneNode model
   */ 
  interface SceneNodeFieldRefs {
    readonly id: FieldRef<"SceneNode", 'String'>
    readonly sceneId: FieldRef<"SceneNode", 'String'>
    readonly type: FieldRef<"SceneNode", 'String'>
    readonly parentId: FieldRef<"SceneNode", 'String'>
    readonly payload: FieldRef<"SceneNode", 'Json'>
    readonly createdAt: FieldRef<"SceneNode", 'DateTime'>
    readonly updatedAt: FieldRef<"SceneNode", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SceneNode findUnique
   */
  export type SceneNodeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SceneNode
     */
    select?: SceneNodeSelect<ExtArgs> | null
    /**
     * Filter, which SceneNode to fetch.
     */
    where: SceneNodeWhereUniqueInput
  }

  /**
   * SceneNode findUniqueOrThrow
   */
  export type SceneNodeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SceneNode
     */
    select?: SceneNodeSelect<ExtArgs> | null
    /**
     * Filter, which SceneNode to fetch.
     */
    where: SceneNodeWhereUniqueInput
  }

  /**
   * SceneNode findFirst
   */
  export type SceneNodeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SceneNode
     */
    select?: SceneNodeSelect<ExtArgs> | null
    /**
     * Filter, which SceneNode to fetch.
     */
    where?: SceneNodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SceneNodes to fetch.
     */
    orderBy?: SceneNodeOrderByWithRelationInput | SceneNodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SceneNodes.
     */
    cursor?: SceneNodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SceneNodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SceneNodes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SceneNodes.
     */
    distinct?: SceneNodeScalarFieldEnum | SceneNodeScalarFieldEnum[]
  }

  /**
   * SceneNode findFirstOrThrow
   */
  export type SceneNodeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SceneNode
     */
    select?: SceneNodeSelect<ExtArgs> | null
    /**
     * Filter, which SceneNode to fetch.
     */
    where?: SceneNodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SceneNodes to fetch.
     */
    orderBy?: SceneNodeOrderByWithRelationInput | SceneNodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SceneNodes.
     */
    cursor?: SceneNodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SceneNodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SceneNodes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SceneNodes.
     */
    distinct?: SceneNodeScalarFieldEnum | SceneNodeScalarFieldEnum[]
  }

  /**
   * SceneNode findMany
   */
  export type SceneNodeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SceneNode
     */
    select?: SceneNodeSelect<ExtArgs> | null
    /**
     * Filter, which SceneNodes to fetch.
     */
    where?: SceneNodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SceneNodes to fetch.
     */
    orderBy?: SceneNodeOrderByWithRelationInput | SceneNodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SceneNodes.
     */
    cursor?: SceneNodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SceneNodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SceneNodes.
     */
    skip?: number
    distinct?: SceneNodeScalarFieldEnum | SceneNodeScalarFieldEnum[]
  }

  /**
   * SceneNode create
   */
  export type SceneNodeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SceneNode
     */
    select?: SceneNodeSelect<ExtArgs> | null
    /**
     * The data needed to create a SceneNode.
     */
    data: XOR<SceneNodeCreateInput, SceneNodeUncheckedCreateInput>
  }

  /**
   * SceneNode createMany
   */
  export type SceneNodeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SceneNodes.
     */
    data: SceneNodeCreateManyInput | SceneNodeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SceneNode createManyAndReturn
   */
  export type SceneNodeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SceneNode
     */
    select?: SceneNodeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many SceneNodes.
     */
    data: SceneNodeCreateManyInput | SceneNodeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SceneNode update
   */
  export type SceneNodeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SceneNode
     */
    select?: SceneNodeSelect<ExtArgs> | null
    /**
     * The data needed to update a SceneNode.
     */
    data: XOR<SceneNodeUpdateInput, SceneNodeUncheckedUpdateInput>
    /**
     * Choose, which SceneNode to update.
     */
    where: SceneNodeWhereUniqueInput
  }

  /**
   * SceneNode updateMany
   */
  export type SceneNodeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SceneNodes.
     */
    data: XOR<SceneNodeUpdateManyMutationInput, SceneNodeUncheckedUpdateManyInput>
    /**
     * Filter which SceneNodes to update
     */
    where?: SceneNodeWhereInput
  }

  /**
   * SceneNode upsert
   */
  export type SceneNodeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SceneNode
     */
    select?: SceneNodeSelect<ExtArgs> | null
    /**
     * The filter to search for the SceneNode to update in case it exists.
     */
    where: SceneNodeWhereUniqueInput
    /**
     * In case the SceneNode found by the `where` argument doesn't exist, create a new SceneNode with this data.
     */
    create: XOR<SceneNodeCreateInput, SceneNodeUncheckedCreateInput>
    /**
     * In case the SceneNode was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SceneNodeUpdateInput, SceneNodeUncheckedUpdateInput>
  }

  /**
   * SceneNode delete
   */
  export type SceneNodeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SceneNode
     */
    select?: SceneNodeSelect<ExtArgs> | null
    /**
     * Filter which SceneNode to delete.
     */
    where: SceneNodeWhereUniqueInput
  }

  /**
   * SceneNode deleteMany
   */
  export type SceneNodeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SceneNodes to delete
     */
    where?: SceneNodeWhereInput
  }

  /**
   * SceneNode without action
   */
  export type SceneNodeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SceneNode
     */
    select?: SceneNodeSelect<ExtArgs> | null
  }


  /**
   * Model FrameStat
   */

  export type AggregateFrameStat = {
    _count: FrameStatCountAggregateOutputType | null
    _avg: FrameStatAvgAggregateOutputType | null
    _sum: FrameStatSumAggregateOutputType | null
    _min: FrameStatMinAggregateOutputType | null
    _max: FrameStatMaxAggregateOutputType | null
  }

  export type FrameStatAvgAggregateOutputType = {
    id: number | null
    fps: number | null
    gpuMemMiB: number | null
  }

  export type FrameStatSumAggregateOutputType = {
    id: number | null
    fps: number | null
    gpuMemMiB: number | null
  }

  export type FrameStatMinAggregateOutputType = {
    id: number | null
    timestamp: Date | null
    fps: number | null
    gpuMemMiB: number | null
    overBudget: boolean | null
  }

  export type FrameStatMaxAggregateOutputType = {
    id: number | null
    timestamp: Date | null
    fps: number | null
    gpuMemMiB: number | null
    overBudget: boolean | null
  }

  export type FrameStatCountAggregateOutputType = {
    id: number
    timestamp: number
    fps: number
    gpuMemMiB: number
    overBudget: number
    _all: number
  }


  export type FrameStatAvgAggregateInputType = {
    id?: true
    fps?: true
    gpuMemMiB?: true
  }

  export type FrameStatSumAggregateInputType = {
    id?: true
    fps?: true
    gpuMemMiB?: true
  }

  export type FrameStatMinAggregateInputType = {
    id?: true
    timestamp?: true
    fps?: true
    gpuMemMiB?: true
    overBudget?: true
  }

  export type FrameStatMaxAggregateInputType = {
    id?: true
    timestamp?: true
    fps?: true
    gpuMemMiB?: true
    overBudget?: true
  }

  export type FrameStatCountAggregateInputType = {
    id?: true
    timestamp?: true
    fps?: true
    gpuMemMiB?: true
    overBudget?: true
    _all?: true
  }

  export type FrameStatAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FrameStat to aggregate.
     */
    where?: FrameStatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FrameStats to fetch.
     */
    orderBy?: FrameStatOrderByWithRelationInput | FrameStatOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FrameStatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FrameStats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FrameStats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FrameStats
    **/
    _count?: true | FrameStatCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FrameStatAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FrameStatSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FrameStatMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FrameStatMaxAggregateInputType
  }

  export type GetFrameStatAggregateType<T extends FrameStatAggregateArgs> = {
        [P in keyof T & keyof AggregateFrameStat]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFrameStat[P]>
      : GetScalarType<T[P], AggregateFrameStat[P]>
  }




  export type FrameStatGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FrameStatWhereInput
    orderBy?: FrameStatOrderByWithAggregationInput | FrameStatOrderByWithAggregationInput[]
    by: FrameStatScalarFieldEnum[] | FrameStatScalarFieldEnum
    having?: FrameStatScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FrameStatCountAggregateInputType | true
    _avg?: FrameStatAvgAggregateInputType
    _sum?: FrameStatSumAggregateInputType
    _min?: FrameStatMinAggregateInputType
    _max?: FrameStatMaxAggregateInputType
  }

  export type FrameStatGroupByOutputType = {
    id: number
    timestamp: Date
    fps: number
    gpuMemMiB: number
    overBudget: boolean
    _count: FrameStatCountAggregateOutputType | null
    _avg: FrameStatAvgAggregateOutputType | null
    _sum: FrameStatSumAggregateOutputType | null
    _min: FrameStatMinAggregateOutputType | null
    _max: FrameStatMaxAggregateOutputType | null
  }

  type GetFrameStatGroupByPayload<T extends FrameStatGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FrameStatGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FrameStatGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FrameStatGroupByOutputType[P]>
            : GetScalarType<T[P], FrameStatGroupByOutputType[P]>
        }
      >
    >


  export type FrameStatSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    timestamp?: boolean
    fps?: boolean
    gpuMemMiB?: boolean
    overBudget?: boolean
  }, ExtArgs["result"]["frameStat"]>

  export type FrameStatSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    timestamp?: boolean
    fps?: boolean
    gpuMemMiB?: boolean
    overBudget?: boolean
  }, ExtArgs["result"]["frameStat"]>

  export type FrameStatSelectScalar = {
    id?: boolean
    timestamp?: boolean
    fps?: boolean
    gpuMemMiB?: boolean
    overBudget?: boolean
  }


  export type $FrameStatPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FrameStat"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      timestamp: Date
      fps: number
      gpuMemMiB: number
      overBudget: boolean
    }, ExtArgs["result"]["frameStat"]>
    composites: {}
  }

  type FrameStatGetPayload<S extends boolean | null | undefined | FrameStatDefaultArgs> = $Result.GetResult<Prisma.$FrameStatPayload, S>

  type FrameStatCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FrameStatFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FrameStatCountAggregateInputType | true
    }

  export interface FrameStatDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FrameStat'], meta: { name: 'FrameStat' } }
    /**
     * Find zero or one FrameStat that matches the filter.
     * @param {FrameStatFindUniqueArgs} args - Arguments to find a FrameStat
     * @example
     * // Get one FrameStat
     * const frameStat = await prisma.frameStat.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FrameStatFindUniqueArgs>(args: SelectSubset<T, FrameStatFindUniqueArgs<ExtArgs>>): Prisma__FrameStatClient<$Result.GetResult<Prisma.$FrameStatPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one FrameStat that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {FrameStatFindUniqueOrThrowArgs} args - Arguments to find a FrameStat
     * @example
     * // Get one FrameStat
     * const frameStat = await prisma.frameStat.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FrameStatFindUniqueOrThrowArgs>(args: SelectSubset<T, FrameStatFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FrameStatClient<$Result.GetResult<Prisma.$FrameStatPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first FrameStat that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FrameStatFindFirstArgs} args - Arguments to find a FrameStat
     * @example
     * // Get one FrameStat
     * const frameStat = await prisma.frameStat.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FrameStatFindFirstArgs>(args?: SelectSubset<T, FrameStatFindFirstArgs<ExtArgs>>): Prisma__FrameStatClient<$Result.GetResult<Prisma.$FrameStatPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first FrameStat that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FrameStatFindFirstOrThrowArgs} args - Arguments to find a FrameStat
     * @example
     * // Get one FrameStat
     * const frameStat = await prisma.frameStat.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FrameStatFindFirstOrThrowArgs>(args?: SelectSubset<T, FrameStatFindFirstOrThrowArgs<ExtArgs>>): Prisma__FrameStatClient<$Result.GetResult<Prisma.$FrameStatPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more FrameStats that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FrameStatFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FrameStats
     * const frameStats = await prisma.frameStat.findMany()
     * 
     * // Get first 10 FrameStats
     * const frameStats = await prisma.frameStat.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const frameStatWithIdOnly = await prisma.frameStat.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FrameStatFindManyArgs>(args?: SelectSubset<T, FrameStatFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FrameStatPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a FrameStat.
     * @param {FrameStatCreateArgs} args - Arguments to create a FrameStat.
     * @example
     * // Create one FrameStat
     * const FrameStat = await prisma.frameStat.create({
     *   data: {
     *     // ... data to create a FrameStat
     *   }
     * })
     * 
     */
    create<T extends FrameStatCreateArgs>(args: SelectSubset<T, FrameStatCreateArgs<ExtArgs>>): Prisma__FrameStatClient<$Result.GetResult<Prisma.$FrameStatPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many FrameStats.
     * @param {FrameStatCreateManyArgs} args - Arguments to create many FrameStats.
     * @example
     * // Create many FrameStats
     * const frameStat = await prisma.frameStat.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FrameStatCreateManyArgs>(args?: SelectSubset<T, FrameStatCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FrameStats and returns the data saved in the database.
     * @param {FrameStatCreateManyAndReturnArgs} args - Arguments to create many FrameStats.
     * @example
     * // Create many FrameStats
     * const frameStat = await prisma.frameStat.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FrameStats and only return the `id`
     * const frameStatWithIdOnly = await prisma.frameStat.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FrameStatCreateManyAndReturnArgs>(args?: SelectSubset<T, FrameStatCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FrameStatPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a FrameStat.
     * @param {FrameStatDeleteArgs} args - Arguments to delete one FrameStat.
     * @example
     * // Delete one FrameStat
     * const FrameStat = await prisma.frameStat.delete({
     *   where: {
     *     // ... filter to delete one FrameStat
     *   }
     * })
     * 
     */
    delete<T extends FrameStatDeleteArgs>(args: SelectSubset<T, FrameStatDeleteArgs<ExtArgs>>): Prisma__FrameStatClient<$Result.GetResult<Prisma.$FrameStatPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one FrameStat.
     * @param {FrameStatUpdateArgs} args - Arguments to update one FrameStat.
     * @example
     * // Update one FrameStat
     * const frameStat = await prisma.frameStat.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FrameStatUpdateArgs>(args: SelectSubset<T, FrameStatUpdateArgs<ExtArgs>>): Prisma__FrameStatClient<$Result.GetResult<Prisma.$FrameStatPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more FrameStats.
     * @param {FrameStatDeleteManyArgs} args - Arguments to filter FrameStats to delete.
     * @example
     * // Delete a few FrameStats
     * const { count } = await prisma.frameStat.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FrameStatDeleteManyArgs>(args?: SelectSubset<T, FrameStatDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FrameStats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FrameStatUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FrameStats
     * const frameStat = await prisma.frameStat.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FrameStatUpdateManyArgs>(args: SelectSubset<T, FrameStatUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one FrameStat.
     * @param {FrameStatUpsertArgs} args - Arguments to update or create a FrameStat.
     * @example
     * // Update or create a FrameStat
     * const frameStat = await prisma.frameStat.upsert({
     *   create: {
     *     // ... data to create a FrameStat
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FrameStat we want to update
     *   }
     * })
     */
    upsert<T extends FrameStatUpsertArgs>(args: SelectSubset<T, FrameStatUpsertArgs<ExtArgs>>): Prisma__FrameStatClient<$Result.GetResult<Prisma.$FrameStatPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of FrameStats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FrameStatCountArgs} args - Arguments to filter FrameStats to count.
     * @example
     * // Count the number of FrameStats
     * const count = await prisma.frameStat.count({
     *   where: {
     *     // ... the filter for the FrameStats we want to count
     *   }
     * })
    **/
    count<T extends FrameStatCountArgs>(
      args?: Subset<T, FrameStatCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FrameStatCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FrameStat.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FrameStatAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FrameStatAggregateArgs>(args: Subset<T, FrameStatAggregateArgs>): Prisma.PrismaPromise<GetFrameStatAggregateType<T>>

    /**
     * Group by FrameStat.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FrameStatGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FrameStatGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FrameStatGroupByArgs['orderBy'] }
        : { orderBy?: FrameStatGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FrameStatGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFrameStatGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FrameStat model
   */
  readonly fields: FrameStatFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FrameStat.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FrameStatClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FrameStat model
   */ 
  interface FrameStatFieldRefs {
    readonly id: FieldRef<"FrameStat", 'Int'>
    readonly timestamp: FieldRef<"FrameStat", 'DateTime'>
    readonly fps: FieldRef<"FrameStat", 'Float'>
    readonly gpuMemMiB: FieldRef<"FrameStat", 'Float'>
    readonly overBudget: FieldRef<"FrameStat", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * FrameStat findUnique
   */
  export type FrameStatFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FrameStat
     */
    select?: FrameStatSelect<ExtArgs> | null
    /**
     * Filter, which FrameStat to fetch.
     */
    where: FrameStatWhereUniqueInput
  }

  /**
   * FrameStat findUniqueOrThrow
   */
  export type FrameStatFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FrameStat
     */
    select?: FrameStatSelect<ExtArgs> | null
    /**
     * Filter, which FrameStat to fetch.
     */
    where: FrameStatWhereUniqueInput
  }

  /**
   * FrameStat findFirst
   */
  export type FrameStatFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FrameStat
     */
    select?: FrameStatSelect<ExtArgs> | null
    /**
     * Filter, which FrameStat to fetch.
     */
    where?: FrameStatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FrameStats to fetch.
     */
    orderBy?: FrameStatOrderByWithRelationInput | FrameStatOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FrameStats.
     */
    cursor?: FrameStatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FrameStats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FrameStats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FrameStats.
     */
    distinct?: FrameStatScalarFieldEnum | FrameStatScalarFieldEnum[]
  }

  /**
   * FrameStat findFirstOrThrow
   */
  export type FrameStatFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FrameStat
     */
    select?: FrameStatSelect<ExtArgs> | null
    /**
     * Filter, which FrameStat to fetch.
     */
    where?: FrameStatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FrameStats to fetch.
     */
    orderBy?: FrameStatOrderByWithRelationInput | FrameStatOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FrameStats.
     */
    cursor?: FrameStatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FrameStats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FrameStats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FrameStats.
     */
    distinct?: FrameStatScalarFieldEnum | FrameStatScalarFieldEnum[]
  }

  /**
   * FrameStat findMany
   */
  export type FrameStatFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FrameStat
     */
    select?: FrameStatSelect<ExtArgs> | null
    /**
     * Filter, which FrameStats to fetch.
     */
    where?: FrameStatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FrameStats to fetch.
     */
    orderBy?: FrameStatOrderByWithRelationInput | FrameStatOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FrameStats.
     */
    cursor?: FrameStatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FrameStats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FrameStats.
     */
    skip?: number
    distinct?: FrameStatScalarFieldEnum | FrameStatScalarFieldEnum[]
  }

  /**
   * FrameStat create
   */
  export type FrameStatCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FrameStat
     */
    select?: FrameStatSelect<ExtArgs> | null
    /**
     * The data needed to create a FrameStat.
     */
    data: XOR<FrameStatCreateInput, FrameStatUncheckedCreateInput>
  }

  /**
   * FrameStat createMany
   */
  export type FrameStatCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FrameStats.
     */
    data: FrameStatCreateManyInput | FrameStatCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FrameStat createManyAndReturn
   */
  export type FrameStatCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FrameStat
     */
    select?: FrameStatSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many FrameStats.
     */
    data: FrameStatCreateManyInput | FrameStatCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FrameStat update
   */
  export type FrameStatUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FrameStat
     */
    select?: FrameStatSelect<ExtArgs> | null
    /**
     * The data needed to update a FrameStat.
     */
    data: XOR<FrameStatUpdateInput, FrameStatUncheckedUpdateInput>
    /**
     * Choose, which FrameStat to update.
     */
    where: FrameStatWhereUniqueInput
  }

  /**
   * FrameStat updateMany
   */
  export type FrameStatUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FrameStats.
     */
    data: XOR<FrameStatUpdateManyMutationInput, FrameStatUncheckedUpdateManyInput>
    /**
     * Filter which FrameStats to update
     */
    where?: FrameStatWhereInput
  }

  /**
   * FrameStat upsert
   */
  export type FrameStatUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FrameStat
     */
    select?: FrameStatSelect<ExtArgs> | null
    /**
     * The filter to search for the FrameStat to update in case it exists.
     */
    where: FrameStatWhereUniqueInput
    /**
     * In case the FrameStat found by the `where` argument doesn't exist, create a new FrameStat with this data.
     */
    create: XOR<FrameStatCreateInput, FrameStatUncheckedCreateInput>
    /**
     * In case the FrameStat was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FrameStatUpdateInput, FrameStatUncheckedUpdateInput>
  }

  /**
   * FrameStat delete
   */
  export type FrameStatDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FrameStat
     */
    select?: FrameStatSelect<ExtArgs> | null
    /**
     * Filter which FrameStat to delete.
     */
    where: FrameStatWhereUniqueInput
  }

  /**
   * FrameStat deleteMany
   */
  export type FrameStatDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FrameStats to delete
     */
    where?: FrameStatWhereInput
  }

  /**
   * FrameStat without action
   */
  export type FrameStatDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FrameStat
     */
    select?: FrameStatSelect<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const RealityScalarFieldEnum: {
    id: 'id',
    description: 'description',
    parameters: 'parameters',
    recursionDepth: 'recursionDepth',
    parentId: 'parentId',
    createdAt: 'createdAt',
    schemaVersion: 'schemaVersion'
  };

  export type RealityScalarFieldEnum = (typeof RealityScalarFieldEnum)[keyof typeof RealityScalarFieldEnum]


  export const RecursionPathScalarFieldEnum: {
    id: 'id',
    parentId: 'parentId',
    childId: 'childId',
    recursionDepth: 'recursionDepth',
    connectionStrength: 'connectionStrength',
    createdAt: 'createdAt',
    schemaVersion: 'schemaVersion'
  };

  export type RecursionPathScalarFieldEnum = (typeof RecursionPathScalarFieldEnum)[keyof typeof RecursionPathScalarFieldEnum]


  export const ConsciousnessFieldScalarFieldEnum: {
    id: 'id',
    parentId: 'parentId',
    childId: 'childId',
    recursionDepth: 'recursionDepth',
    fieldStrength: 'fieldStrength',
    createdAt: 'createdAt',
    schemaVersion: 'schemaVersion'
  };

  export type ConsciousnessFieldScalarFieldEnum = (typeof ConsciousnessFieldScalarFieldEnum)[keyof typeof ConsciousnessFieldScalarFieldEnum]


  export const MetricScalarFieldEnum: {
    key: 'key',
    value: 'value'
  };

  export type MetricScalarFieldEnum = (typeof MetricScalarFieldEnum)[keyof typeof MetricScalarFieldEnum]


  export const SceneNodeScalarFieldEnum: {
    id: 'id',
    sceneId: 'sceneId',
    type: 'type',
    parentId: 'parentId',
    payload: 'payload',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SceneNodeScalarFieldEnum = (typeof SceneNodeScalarFieldEnum)[keyof typeof SceneNodeScalarFieldEnum]


  export const FrameStatScalarFieldEnum: {
    id: 'id',
    timestamp: 'timestamp',
    fps: 'fps',
    gpuMemMiB: 'gpuMemMiB',
    overBudget: 'overBudget'
  };

  export type FrameStatScalarFieldEnum = (typeof FrameStatScalarFieldEnum)[keyof typeof FrameStatScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    
  /**
   * Deep Input Types
   */


  export type RealityWhereInput = {
    AND?: RealityWhereInput | RealityWhereInput[]
    OR?: RealityWhereInput[]
    NOT?: RealityWhereInput | RealityWhereInput[]
    id?: StringFilter<"Reality"> | string
    description?: StringFilter<"Reality"> | string
    parameters?: StringNullableFilter<"Reality"> | string | null
    recursionDepth?: IntNullableFilter<"Reality"> | number | null
    parentId?: StringNullableFilter<"Reality"> | string | null
    createdAt?: DateTimeFilter<"Reality"> | Date | string
    schemaVersion?: IntFilter<"Reality"> | number
  }

  export type RealityOrderByWithRelationInput = {
    id?: SortOrder
    description?: SortOrder
    parameters?: SortOrderInput | SortOrder
    recursionDepth?: SortOrderInput | SortOrder
    parentId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    schemaVersion?: SortOrder
  }

  export type RealityWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: RealityWhereInput | RealityWhereInput[]
    OR?: RealityWhereInput[]
    NOT?: RealityWhereInput | RealityWhereInput[]
    description?: StringFilter<"Reality"> | string
    parameters?: StringNullableFilter<"Reality"> | string | null
    recursionDepth?: IntNullableFilter<"Reality"> | number | null
    parentId?: StringNullableFilter<"Reality"> | string | null
    createdAt?: DateTimeFilter<"Reality"> | Date | string
    schemaVersion?: IntFilter<"Reality"> | number
  }, "id">

  export type RealityOrderByWithAggregationInput = {
    id?: SortOrder
    description?: SortOrder
    parameters?: SortOrderInput | SortOrder
    recursionDepth?: SortOrderInput | SortOrder
    parentId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    schemaVersion?: SortOrder
    _count?: RealityCountOrderByAggregateInput
    _avg?: RealityAvgOrderByAggregateInput
    _max?: RealityMaxOrderByAggregateInput
    _min?: RealityMinOrderByAggregateInput
    _sum?: RealitySumOrderByAggregateInput
  }

  export type RealityScalarWhereWithAggregatesInput = {
    AND?: RealityScalarWhereWithAggregatesInput | RealityScalarWhereWithAggregatesInput[]
    OR?: RealityScalarWhereWithAggregatesInput[]
    NOT?: RealityScalarWhereWithAggregatesInput | RealityScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Reality"> | string
    description?: StringWithAggregatesFilter<"Reality"> | string
    parameters?: StringNullableWithAggregatesFilter<"Reality"> | string | null
    recursionDepth?: IntNullableWithAggregatesFilter<"Reality"> | number | null
    parentId?: StringNullableWithAggregatesFilter<"Reality"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Reality"> | Date | string
    schemaVersion?: IntWithAggregatesFilter<"Reality"> | number
  }

  export type RecursionPathWhereInput = {
    AND?: RecursionPathWhereInput | RecursionPathWhereInput[]
    OR?: RecursionPathWhereInput[]
    NOT?: RecursionPathWhereInput | RecursionPathWhereInput[]
    id?: StringFilter<"RecursionPath"> | string
    parentId?: StringFilter<"RecursionPath"> | string
    childId?: StringFilter<"RecursionPath"> | string
    recursionDepth?: IntFilter<"RecursionPath"> | number
    connectionStrength?: FloatNullableFilter<"RecursionPath"> | number | null
    createdAt?: DateTimeFilter<"RecursionPath"> | Date | string
    schemaVersion?: IntFilter<"RecursionPath"> | number
  }

  export type RecursionPathOrderByWithRelationInput = {
    id?: SortOrder
    parentId?: SortOrder
    childId?: SortOrder
    recursionDepth?: SortOrder
    connectionStrength?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    schemaVersion?: SortOrder
  }

  export type RecursionPathWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: RecursionPathWhereInput | RecursionPathWhereInput[]
    OR?: RecursionPathWhereInput[]
    NOT?: RecursionPathWhereInput | RecursionPathWhereInput[]
    parentId?: StringFilter<"RecursionPath"> | string
    childId?: StringFilter<"RecursionPath"> | string
    recursionDepth?: IntFilter<"RecursionPath"> | number
    connectionStrength?: FloatNullableFilter<"RecursionPath"> | number | null
    createdAt?: DateTimeFilter<"RecursionPath"> | Date | string
    schemaVersion?: IntFilter<"RecursionPath"> | number
  }, "id">

  export type RecursionPathOrderByWithAggregationInput = {
    id?: SortOrder
    parentId?: SortOrder
    childId?: SortOrder
    recursionDepth?: SortOrder
    connectionStrength?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    schemaVersion?: SortOrder
    _count?: RecursionPathCountOrderByAggregateInput
    _avg?: RecursionPathAvgOrderByAggregateInput
    _max?: RecursionPathMaxOrderByAggregateInput
    _min?: RecursionPathMinOrderByAggregateInput
    _sum?: RecursionPathSumOrderByAggregateInput
  }

  export type RecursionPathScalarWhereWithAggregatesInput = {
    AND?: RecursionPathScalarWhereWithAggregatesInput | RecursionPathScalarWhereWithAggregatesInput[]
    OR?: RecursionPathScalarWhereWithAggregatesInput[]
    NOT?: RecursionPathScalarWhereWithAggregatesInput | RecursionPathScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"RecursionPath"> | string
    parentId?: StringWithAggregatesFilter<"RecursionPath"> | string
    childId?: StringWithAggregatesFilter<"RecursionPath"> | string
    recursionDepth?: IntWithAggregatesFilter<"RecursionPath"> | number
    connectionStrength?: FloatNullableWithAggregatesFilter<"RecursionPath"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"RecursionPath"> | Date | string
    schemaVersion?: IntWithAggregatesFilter<"RecursionPath"> | number
  }

  export type ConsciousnessFieldWhereInput = {
    AND?: ConsciousnessFieldWhereInput | ConsciousnessFieldWhereInput[]
    OR?: ConsciousnessFieldWhereInput[]
    NOT?: ConsciousnessFieldWhereInput | ConsciousnessFieldWhereInput[]
    id?: StringFilter<"ConsciousnessField"> | string
    parentId?: StringFilter<"ConsciousnessField"> | string
    childId?: StringFilter<"ConsciousnessField"> | string
    recursionDepth?: IntFilter<"ConsciousnessField"> | number
    fieldStrength?: FloatNullableFilter<"ConsciousnessField"> | number | null
    createdAt?: DateTimeFilter<"ConsciousnessField"> | Date | string
    schemaVersion?: IntFilter<"ConsciousnessField"> | number
  }

  export type ConsciousnessFieldOrderByWithRelationInput = {
    id?: SortOrder
    parentId?: SortOrder
    childId?: SortOrder
    recursionDepth?: SortOrder
    fieldStrength?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    schemaVersion?: SortOrder
  }

  export type ConsciousnessFieldWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ConsciousnessFieldWhereInput | ConsciousnessFieldWhereInput[]
    OR?: ConsciousnessFieldWhereInput[]
    NOT?: ConsciousnessFieldWhereInput | ConsciousnessFieldWhereInput[]
    parentId?: StringFilter<"ConsciousnessField"> | string
    childId?: StringFilter<"ConsciousnessField"> | string
    recursionDepth?: IntFilter<"ConsciousnessField"> | number
    fieldStrength?: FloatNullableFilter<"ConsciousnessField"> | number | null
    createdAt?: DateTimeFilter<"ConsciousnessField"> | Date | string
    schemaVersion?: IntFilter<"ConsciousnessField"> | number
  }, "id">

  export type ConsciousnessFieldOrderByWithAggregationInput = {
    id?: SortOrder
    parentId?: SortOrder
    childId?: SortOrder
    recursionDepth?: SortOrder
    fieldStrength?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    schemaVersion?: SortOrder
    _count?: ConsciousnessFieldCountOrderByAggregateInput
    _avg?: ConsciousnessFieldAvgOrderByAggregateInput
    _max?: ConsciousnessFieldMaxOrderByAggregateInput
    _min?: ConsciousnessFieldMinOrderByAggregateInput
    _sum?: ConsciousnessFieldSumOrderByAggregateInput
  }

  export type ConsciousnessFieldScalarWhereWithAggregatesInput = {
    AND?: ConsciousnessFieldScalarWhereWithAggregatesInput | ConsciousnessFieldScalarWhereWithAggregatesInput[]
    OR?: ConsciousnessFieldScalarWhereWithAggregatesInput[]
    NOT?: ConsciousnessFieldScalarWhereWithAggregatesInput | ConsciousnessFieldScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ConsciousnessField"> | string
    parentId?: StringWithAggregatesFilter<"ConsciousnessField"> | string
    childId?: StringWithAggregatesFilter<"ConsciousnessField"> | string
    recursionDepth?: IntWithAggregatesFilter<"ConsciousnessField"> | number
    fieldStrength?: FloatNullableWithAggregatesFilter<"ConsciousnessField"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"ConsciousnessField"> | Date | string
    schemaVersion?: IntWithAggregatesFilter<"ConsciousnessField"> | number
  }

  export type MetricWhereInput = {
    AND?: MetricWhereInput | MetricWhereInput[]
    OR?: MetricWhereInput[]
    NOT?: MetricWhereInput | MetricWhereInput[]
    key?: StringFilter<"Metric"> | string
    value?: FloatFilter<"Metric"> | number
  }

  export type MetricOrderByWithRelationInput = {
    key?: SortOrder
    value?: SortOrder
  }

  export type MetricWhereUniqueInput = Prisma.AtLeast<{
    key?: string
    AND?: MetricWhereInput | MetricWhereInput[]
    OR?: MetricWhereInput[]
    NOT?: MetricWhereInput | MetricWhereInput[]
    value?: FloatFilter<"Metric"> | number
  }, "key">

  export type MetricOrderByWithAggregationInput = {
    key?: SortOrder
    value?: SortOrder
    _count?: MetricCountOrderByAggregateInput
    _avg?: MetricAvgOrderByAggregateInput
    _max?: MetricMaxOrderByAggregateInput
    _min?: MetricMinOrderByAggregateInput
    _sum?: MetricSumOrderByAggregateInput
  }

  export type MetricScalarWhereWithAggregatesInput = {
    AND?: MetricScalarWhereWithAggregatesInput | MetricScalarWhereWithAggregatesInput[]
    OR?: MetricScalarWhereWithAggregatesInput[]
    NOT?: MetricScalarWhereWithAggregatesInput | MetricScalarWhereWithAggregatesInput[]
    key?: StringWithAggregatesFilter<"Metric"> | string
    value?: FloatWithAggregatesFilter<"Metric"> | number
  }

  export type SceneNodeWhereInput = {
    AND?: SceneNodeWhereInput | SceneNodeWhereInput[]
    OR?: SceneNodeWhereInput[]
    NOT?: SceneNodeWhereInput | SceneNodeWhereInput[]
    id?: StringFilter<"SceneNode"> | string
    sceneId?: StringFilter<"SceneNode"> | string
    type?: StringFilter<"SceneNode"> | string
    parentId?: StringNullableFilter<"SceneNode"> | string | null
    payload?: JsonFilter<"SceneNode">
    createdAt?: DateTimeFilter<"SceneNode"> | Date | string
    updatedAt?: DateTimeFilter<"SceneNode"> | Date | string
  }

  export type SceneNodeOrderByWithRelationInput = {
    id?: SortOrder
    sceneId?: SortOrder
    type?: SortOrder
    parentId?: SortOrderInput | SortOrder
    payload?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SceneNodeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SceneNodeWhereInput | SceneNodeWhereInput[]
    OR?: SceneNodeWhereInput[]
    NOT?: SceneNodeWhereInput | SceneNodeWhereInput[]
    sceneId?: StringFilter<"SceneNode"> | string
    type?: StringFilter<"SceneNode"> | string
    parentId?: StringNullableFilter<"SceneNode"> | string | null
    payload?: JsonFilter<"SceneNode">
    createdAt?: DateTimeFilter<"SceneNode"> | Date | string
    updatedAt?: DateTimeFilter<"SceneNode"> | Date | string
  }, "id">

  export type SceneNodeOrderByWithAggregationInput = {
    id?: SortOrder
    sceneId?: SortOrder
    type?: SortOrder
    parentId?: SortOrderInput | SortOrder
    payload?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SceneNodeCountOrderByAggregateInput
    _max?: SceneNodeMaxOrderByAggregateInput
    _min?: SceneNodeMinOrderByAggregateInput
  }

  export type SceneNodeScalarWhereWithAggregatesInput = {
    AND?: SceneNodeScalarWhereWithAggregatesInput | SceneNodeScalarWhereWithAggregatesInput[]
    OR?: SceneNodeScalarWhereWithAggregatesInput[]
    NOT?: SceneNodeScalarWhereWithAggregatesInput | SceneNodeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SceneNode"> | string
    sceneId?: StringWithAggregatesFilter<"SceneNode"> | string
    type?: StringWithAggregatesFilter<"SceneNode"> | string
    parentId?: StringNullableWithAggregatesFilter<"SceneNode"> | string | null
    payload?: JsonWithAggregatesFilter<"SceneNode">
    createdAt?: DateTimeWithAggregatesFilter<"SceneNode"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"SceneNode"> | Date | string
  }

  export type FrameStatWhereInput = {
    AND?: FrameStatWhereInput | FrameStatWhereInput[]
    OR?: FrameStatWhereInput[]
    NOT?: FrameStatWhereInput | FrameStatWhereInput[]
    id?: IntFilter<"FrameStat"> | number
    timestamp?: DateTimeFilter<"FrameStat"> | Date | string
    fps?: FloatFilter<"FrameStat"> | number
    gpuMemMiB?: FloatFilter<"FrameStat"> | number
    overBudget?: BoolFilter<"FrameStat"> | boolean
  }

  export type FrameStatOrderByWithRelationInput = {
    id?: SortOrder
    timestamp?: SortOrder
    fps?: SortOrder
    gpuMemMiB?: SortOrder
    overBudget?: SortOrder
  }

  export type FrameStatWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: FrameStatWhereInput | FrameStatWhereInput[]
    OR?: FrameStatWhereInput[]
    NOT?: FrameStatWhereInput | FrameStatWhereInput[]
    timestamp?: DateTimeFilter<"FrameStat"> | Date | string
    fps?: FloatFilter<"FrameStat"> | number
    gpuMemMiB?: FloatFilter<"FrameStat"> | number
    overBudget?: BoolFilter<"FrameStat"> | boolean
  }, "id">

  export type FrameStatOrderByWithAggregationInput = {
    id?: SortOrder
    timestamp?: SortOrder
    fps?: SortOrder
    gpuMemMiB?: SortOrder
    overBudget?: SortOrder
    _count?: FrameStatCountOrderByAggregateInput
    _avg?: FrameStatAvgOrderByAggregateInput
    _max?: FrameStatMaxOrderByAggregateInput
    _min?: FrameStatMinOrderByAggregateInput
    _sum?: FrameStatSumOrderByAggregateInput
  }

  export type FrameStatScalarWhereWithAggregatesInput = {
    AND?: FrameStatScalarWhereWithAggregatesInput | FrameStatScalarWhereWithAggregatesInput[]
    OR?: FrameStatScalarWhereWithAggregatesInput[]
    NOT?: FrameStatScalarWhereWithAggregatesInput | FrameStatScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"FrameStat"> | number
    timestamp?: DateTimeWithAggregatesFilter<"FrameStat"> | Date | string
    fps?: FloatWithAggregatesFilter<"FrameStat"> | number
    gpuMemMiB?: FloatWithAggregatesFilter<"FrameStat"> | number
    overBudget?: BoolWithAggregatesFilter<"FrameStat"> | boolean
  }

  export type RealityCreateInput = {
    id: string
    description: string
    parameters?: string | null
    recursionDepth?: number | null
    parentId?: string | null
    createdAt?: Date | string
    schemaVersion?: number
  }

  export type RealityUncheckedCreateInput = {
    id: string
    description: string
    parameters?: string | null
    recursionDepth?: number | null
    parentId?: string | null
    createdAt?: Date | string
    schemaVersion?: number
  }

  export type RealityUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    parameters?: NullableStringFieldUpdateOperationsInput | string | null
    recursionDepth?: NullableIntFieldUpdateOperationsInput | number | null
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    schemaVersion?: IntFieldUpdateOperationsInput | number
  }

  export type RealityUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    parameters?: NullableStringFieldUpdateOperationsInput | string | null
    recursionDepth?: NullableIntFieldUpdateOperationsInput | number | null
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    schemaVersion?: IntFieldUpdateOperationsInput | number
  }

  export type RealityCreateManyInput = {
    id: string
    description: string
    parameters?: string | null
    recursionDepth?: number | null
    parentId?: string | null
    createdAt?: Date | string
    schemaVersion?: number
  }

  export type RealityUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    parameters?: NullableStringFieldUpdateOperationsInput | string | null
    recursionDepth?: NullableIntFieldUpdateOperationsInput | number | null
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    schemaVersion?: IntFieldUpdateOperationsInput | number
  }

  export type RealityUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    parameters?: NullableStringFieldUpdateOperationsInput | string | null
    recursionDepth?: NullableIntFieldUpdateOperationsInput | number | null
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    schemaVersion?: IntFieldUpdateOperationsInput | number
  }

  export type RecursionPathCreateInput = {
    id: string
    parentId: string
    childId: string
    recursionDepth: number
    connectionStrength?: number | null
    createdAt?: Date | string
    schemaVersion?: number
  }

  export type RecursionPathUncheckedCreateInput = {
    id: string
    parentId: string
    childId: string
    recursionDepth: number
    connectionStrength?: number | null
    createdAt?: Date | string
    schemaVersion?: number
  }

  export type RecursionPathUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    parentId?: StringFieldUpdateOperationsInput | string
    childId?: StringFieldUpdateOperationsInput | string
    recursionDepth?: IntFieldUpdateOperationsInput | number
    connectionStrength?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    schemaVersion?: IntFieldUpdateOperationsInput | number
  }

  export type RecursionPathUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    parentId?: StringFieldUpdateOperationsInput | string
    childId?: StringFieldUpdateOperationsInput | string
    recursionDepth?: IntFieldUpdateOperationsInput | number
    connectionStrength?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    schemaVersion?: IntFieldUpdateOperationsInput | number
  }

  export type RecursionPathCreateManyInput = {
    id: string
    parentId: string
    childId: string
    recursionDepth: number
    connectionStrength?: number | null
    createdAt?: Date | string
    schemaVersion?: number
  }

  export type RecursionPathUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    parentId?: StringFieldUpdateOperationsInput | string
    childId?: StringFieldUpdateOperationsInput | string
    recursionDepth?: IntFieldUpdateOperationsInput | number
    connectionStrength?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    schemaVersion?: IntFieldUpdateOperationsInput | number
  }

  export type RecursionPathUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    parentId?: StringFieldUpdateOperationsInput | string
    childId?: StringFieldUpdateOperationsInput | string
    recursionDepth?: IntFieldUpdateOperationsInput | number
    connectionStrength?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    schemaVersion?: IntFieldUpdateOperationsInput | number
  }

  export type ConsciousnessFieldCreateInput = {
    id: string
    parentId: string
    childId: string
    recursionDepth: number
    fieldStrength?: number | null
    createdAt?: Date | string
    schemaVersion?: number
  }

  export type ConsciousnessFieldUncheckedCreateInput = {
    id: string
    parentId: string
    childId: string
    recursionDepth: number
    fieldStrength?: number | null
    createdAt?: Date | string
    schemaVersion?: number
  }

  export type ConsciousnessFieldUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    parentId?: StringFieldUpdateOperationsInput | string
    childId?: StringFieldUpdateOperationsInput | string
    recursionDepth?: IntFieldUpdateOperationsInput | number
    fieldStrength?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    schemaVersion?: IntFieldUpdateOperationsInput | number
  }

  export type ConsciousnessFieldUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    parentId?: StringFieldUpdateOperationsInput | string
    childId?: StringFieldUpdateOperationsInput | string
    recursionDepth?: IntFieldUpdateOperationsInput | number
    fieldStrength?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    schemaVersion?: IntFieldUpdateOperationsInput | number
  }

  export type ConsciousnessFieldCreateManyInput = {
    id: string
    parentId: string
    childId: string
    recursionDepth: number
    fieldStrength?: number | null
    createdAt?: Date | string
    schemaVersion?: number
  }

  export type ConsciousnessFieldUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    parentId?: StringFieldUpdateOperationsInput | string
    childId?: StringFieldUpdateOperationsInput | string
    recursionDepth?: IntFieldUpdateOperationsInput | number
    fieldStrength?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    schemaVersion?: IntFieldUpdateOperationsInput | number
  }

  export type ConsciousnessFieldUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    parentId?: StringFieldUpdateOperationsInput | string
    childId?: StringFieldUpdateOperationsInput | string
    recursionDepth?: IntFieldUpdateOperationsInput | number
    fieldStrength?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    schemaVersion?: IntFieldUpdateOperationsInput | number
  }

  export type MetricCreateInput = {
    key: string
    value: number
  }

  export type MetricUncheckedCreateInput = {
    key: string
    value: number
  }

  export type MetricUpdateInput = {
    key?: StringFieldUpdateOperationsInput | string
    value?: FloatFieldUpdateOperationsInput | number
  }

  export type MetricUncheckedUpdateInput = {
    key?: StringFieldUpdateOperationsInput | string
    value?: FloatFieldUpdateOperationsInput | number
  }

  export type MetricCreateManyInput = {
    key: string
    value: number
  }

  export type MetricUpdateManyMutationInput = {
    key?: StringFieldUpdateOperationsInput | string
    value?: FloatFieldUpdateOperationsInput | number
  }

  export type MetricUncheckedUpdateManyInput = {
    key?: StringFieldUpdateOperationsInput | string
    value?: FloatFieldUpdateOperationsInput | number
  }

  export type SceneNodeCreateInput = {
    id?: string
    sceneId: string
    type: string
    parentId?: string | null
    payload: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SceneNodeUncheckedCreateInput = {
    id?: string
    sceneId: string
    type: string
    parentId?: string | null
    payload: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SceneNodeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sceneId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    payload?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SceneNodeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sceneId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    payload?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SceneNodeCreateManyInput = {
    id?: string
    sceneId: string
    type: string
    parentId?: string | null
    payload: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SceneNodeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    sceneId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    payload?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SceneNodeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    sceneId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    payload?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FrameStatCreateInput = {
    timestamp?: Date | string
    fps: number
    gpuMemMiB: number
    overBudget: boolean
  }

  export type FrameStatUncheckedCreateInput = {
    id?: number
    timestamp?: Date | string
    fps: number
    gpuMemMiB: number
    overBudget: boolean
  }

  export type FrameStatUpdateInput = {
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    fps?: FloatFieldUpdateOperationsInput | number
    gpuMemMiB?: FloatFieldUpdateOperationsInput | number
    overBudget?: BoolFieldUpdateOperationsInput | boolean
  }

  export type FrameStatUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    fps?: FloatFieldUpdateOperationsInput | number
    gpuMemMiB?: FloatFieldUpdateOperationsInput | number
    overBudget?: BoolFieldUpdateOperationsInput | boolean
  }

  export type FrameStatCreateManyInput = {
    id?: number
    timestamp?: Date | string
    fps: number
    gpuMemMiB: number
    overBudget: boolean
  }

  export type FrameStatUpdateManyMutationInput = {
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    fps?: FloatFieldUpdateOperationsInput | number
    gpuMemMiB?: FloatFieldUpdateOperationsInput | number
    overBudget?: BoolFieldUpdateOperationsInput | boolean
  }

  export type FrameStatUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    fps?: FloatFieldUpdateOperationsInput | number
    gpuMemMiB?: FloatFieldUpdateOperationsInput | number
    overBudget?: BoolFieldUpdateOperationsInput | boolean
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type RealityCountOrderByAggregateInput = {
    id?: SortOrder
    description?: SortOrder
    parameters?: SortOrder
    recursionDepth?: SortOrder
    parentId?: SortOrder
    createdAt?: SortOrder
    schemaVersion?: SortOrder
  }

  export type RealityAvgOrderByAggregateInput = {
    recursionDepth?: SortOrder
    schemaVersion?: SortOrder
  }

  export type RealityMaxOrderByAggregateInput = {
    id?: SortOrder
    description?: SortOrder
    parameters?: SortOrder
    recursionDepth?: SortOrder
    parentId?: SortOrder
    createdAt?: SortOrder
    schemaVersion?: SortOrder
  }

  export type RealityMinOrderByAggregateInput = {
    id?: SortOrder
    description?: SortOrder
    parameters?: SortOrder
    recursionDepth?: SortOrder
    parentId?: SortOrder
    createdAt?: SortOrder
    schemaVersion?: SortOrder
  }

  export type RealitySumOrderByAggregateInput = {
    recursionDepth?: SortOrder
    schemaVersion?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type RecursionPathCountOrderByAggregateInput = {
    id?: SortOrder
    parentId?: SortOrder
    childId?: SortOrder
    recursionDepth?: SortOrder
    connectionStrength?: SortOrder
    createdAt?: SortOrder
    schemaVersion?: SortOrder
  }

  export type RecursionPathAvgOrderByAggregateInput = {
    recursionDepth?: SortOrder
    connectionStrength?: SortOrder
    schemaVersion?: SortOrder
  }

  export type RecursionPathMaxOrderByAggregateInput = {
    id?: SortOrder
    parentId?: SortOrder
    childId?: SortOrder
    recursionDepth?: SortOrder
    connectionStrength?: SortOrder
    createdAt?: SortOrder
    schemaVersion?: SortOrder
  }

  export type RecursionPathMinOrderByAggregateInput = {
    id?: SortOrder
    parentId?: SortOrder
    childId?: SortOrder
    recursionDepth?: SortOrder
    connectionStrength?: SortOrder
    createdAt?: SortOrder
    schemaVersion?: SortOrder
  }

  export type RecursionPathSumOrderByAggregateInput = {
    recursionDepth?: SortOrder
    connectionStrength?: SortOrder
    schemaVersion?: SortOrder
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type ConsciousnessFieldCountOrderByAggregateInput = {
    id?: SortOrder
    parentId?: SortOrder
    childId?: SortOrder
    recursionDepth?: SortOrder
    fieldStrength?: SortOrder
    createdAt?: SortOrder
    schemaVersion?: SortOrder
  }

  export type ConsciousnessFieldAvgOrderByAggregateInput = {
    recursionDepth?: SortOrder
    fieldStrength?: SortOrder
    schemaVersion?: SortOrder
  }

  export type ConsciousnessFieldMaxOrderByAggregateInput = {
    id?: SortOrder
    parentId?: SortOrder
    childId?: SortOrder
    recursionDepth?: SortOrder
    fieldStrength?: SortOrder
    createdAt?: SortOrder
    schemaVersion?: SortOrder
  }

  export type ConsciousnessFieldMinOrderByAggregateInput = {
    id?: SortOrder
    parentId?: SortOrder
    childId?: SortOrder
    recursionDepth?: SortOrder
    fieldStrength?: SortOrder
    createdAt?: SortOrder
    schemaVersion?: SortOrder
  }

  export type ConsciousnessFieldSumOrderByAggregateInput = {
    recursionDepth?: SortOrder
    fieldStrength?: SortOrder
    schemaVersion?: SortOrder
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type MetricCountOrderByAggregateInput = {
    key?: SortOrder
    value?: SortOrder
  }

  export type MetricAvgOrderByAggregateInput = {
    value?: SortOrder
  }

  export type MetricMaxOrderByAggregateInput = {
    key?: SortOrder
    value?: SortOrder
  }

  export type MetricMinOrderByAggregateInput = {
    key?: SortOrder
    value?: SortOrder
  }

  export type MetricSumOrderByAggregateInput = {
    value?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }
  export type JsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type SceneNodeCountOrderByAggregateInput = {
    id?: SortOrder
    sceneId?: SortOrder
    type?: SortOrder
    parentId?: SortOrder
    payload?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SceneNodeMaxOrderByAggregateInput = {
    id?: SortOrder
    sceneId?: SortOrder
    type?: SortOrder
    parentId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SceneNodeMinOrderByAggregateInput = {
    id?: SortOrder
    sceneId?: SortOrder
    type?: SortOrder
    parentId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type FrameStatCountOrderByAggregateInput = {
    id?: SortOrder
    timestamp?: SortOrder
    fps?: SortOrder
    gpuMemMiB?: SortOrder
    overBudget?: SortOrder
  }

  export type FrameStatAvgOrderByAggregateInput = {
    id?: SortOrder
    fps?: SortOrder
    gpuMemMiB?: SortOrder
  }

  export type FrameStatMaxOrderByAggregateInput = {
    id?: SortOrder
    timestamp?: SortOrder
    fps?: SortOrder
    gpuMemMiB?: SortOrder
    overBudget?: SortOrder
  }

  export type FrameStatMinOrderByAggregateInput = {
    id?: SortOrder
    timestamp?: SortOrder
    fps?: SortOrder
    gpuMemMiB?: SortOrder
    overBudget?: SortOrder
  }

  export type FrameStatSumOrderByAggregateInput = {
    id?: SortOrder
    fps?: SortOrder
    gpuMemMiB?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }
  export type NestedJsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use RealityDefaultArgs instead
     */
    export type RealityArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RealityDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RecursionPathDefaultArgs instead
     */
    export type RecursionPathArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RecursionPathDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ConsciousnessFieldDefaultArgs instead
     */
    export type ConsciousnessFieldArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ConsciousnessFieldDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MetricDefaultArgs instead
     */
    export type MetricArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MetricDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SceneNodeDefaultArgs instead
     */
    export type SceneNodeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SceneNodeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FrameStatDefaultArgs instead
     */
    export type FrameStatArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FrameStatDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}