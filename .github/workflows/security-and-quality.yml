name: Security and Quality Checks

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  security_scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Gitleaks scan
        uses: gitleaks/gitleaks-action@v2
        with:
          config_path: .gitleaks.toml

  trivy_scan:
    name: Trivy Scan
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - target: filesystem
          - target: image
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install Trivy
        uses: aquasecurity/trivy-action@master
        with:
          cache: true

      - name: Trivy FS scan
        if: matrix.target == 'filesystem'
        run: |
          trivy fs --exit-code 1 --severity HIGH,CRITICAL .

      - name: Build root Dockerfile image
        if: matrix.target == 'image'
        run: docker build -f Dockerfile -t test-image .

      - name: Trivy image scan (root Dockerfile)
        if: matrix.target == 'image'
        run: trivy image --exit-code 1 --severity HIGH,CRITICAL test-image

  compose_health:
    name: Compose Health
    runs-on: ubuntu-latest
    strategy:
      matrix:
        compose_file:
          - docker-compose.api.yml
          - docker-compose.consciousness.yml
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Integration and health test
        run: |
          chmod +x scripts/compose-health-check.sh
          bash scripts/compose-health-check.sh "${{ matrix.compose_file }}"

  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run ESLint
      run: npx eslint . --ext .js,.ts,.jsx,.tsx --max-warnings 0

    - name: Run TypeScript check
      run: npx tsc --noEmit

  prometheus-validation:
    name: Prometheus Rules Validation
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Prometheus
      run: |
        wget https://github.com/prometheus/prometheus/releases/download/v2.45.0/prometheus-2.45.0.linux-amd64.tar.gz
        tar xvfz prometheus-2.45.0.linux-amd64.tar.gz
        sudo mv prometheus-2.45.0.linux-amd64/promtool /usr/local/bin/

    - name: Validate Prometheus alert rules
      run: |
        if [ -f "deploy/prometheus/alerts/selfcoding_rules.yml" ]; then
          promtool check rules deploy/prometheus/alerts/selfcoding_rules.yml
        else
          echo "No Prometheus rules found to validate"
        fi

  grafana-validation:
    name: Grafana Dashboard Validation
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Validate Grafana dashboard JSON
      run: |
        if [ -f "monitoring/grafana/selfcoding_dashboard.json" ]; then
          echo "Validating Grafana dashboard JSON..."
          python -m json.tool monitoring/grafana/selfcoding_dashboard.json > /dev/null
          echo "✅ Dashboard JSON is valid"
        else
          echo "No Grafana dashboard found to validate"
        fi

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [security_scan, trivy_scan, compose_health, code-quality, prometheus-validation, grafana-validation]
    if: always()
    steps:
    - name: Security Check Summary
      run: |
        echo "## Security and Quality Check Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Secret Scan | ${{ needs.security_scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Trivy Scan | ${{ needs.trivy_scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Compose Health | ${{ needs.compose_health.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Code Quality | ${{ needs.code-quality.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Prometheus Rules | ${{ needs.prometheus-validation.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Grafana Dashboard | ${{ needs.grafana-validation.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Semgrep SAST | ${{ needs.semgrep_sast.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY

  semgrep_sast:
    name: Semgrep SAST
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run Semgrep OSS
        uses: returntocorp/semgrep-action@v1
        with:
          config: "p/default"
          generateSarif: "1"
      - name: Upload SARIF results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: semgrep.sarif
