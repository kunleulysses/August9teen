name: Security and Quality Checks

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run Gitleaks secret scan
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

    - name: Run npm audit (production dependencies)
      run: npm audit --omit=dev --audit-level=moderate

    - name: Run npm audit (all dependencies)
      run: npm audit --audit-level=high
      continue-on-error: true

    - name: Software Composition Analysis
      run: |
        echo "Running SCA checks..."
        npx audit-ci --config audit-ci.json
      continue-on-error: true

    - name: Check for known vulnerabilities in Docker images
      if: hashFiles('Dockerfile*') != ''
      run: |
        if command -v docker &> /dev/null; then
          echo "Scanning Dockerfile for vulnerabilities..."
          docker run --rm -v "$PWD":/app -w /app hadolint/hadolint:latest hadolint Dockerfile || true
        fi

  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run ESLint
      run: npx eslint . --ext .js,.ts,.jsx,.tsx --max-warnings 0
      continue-on-error: true

    - name: Run TypeScript check
      run: npx tsc --noEmit
      continue-on-error: true

    - name: Run tests
      run: npm test
      continue-on-error: true

  prometheus-validation:
    name: Prometheus Rules Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Prometheus
      run: |
        wget https://github.com/prometheus/prometheus/releases/download/v2.45.0/prometheus-2.45.0.linux-amd64.tar.gz
        tar xvfz prometheus-2.45.0.linux-amd64.tar.gz
        sudo mv prometheus-2.45.0.linux-amd64/promtool /usr/local/bin/

    - name: Validate Prometheus alert rules
      run: |
        if [ -f "deploy/prometheus/alerts/selfcoding_rules.yml" ]; then
          promtool check rules deploy/prometheus/alerts/selfcoding_rules.yml
        else
          echo "No Prometheus rules found to validate"
        fi

  grafana-validation:
    name: Grafana Dashboard Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Validate Grafana dashboard JSON
      run: |
        if [ -f "monitoring/grafana/selfcoding_dashboard.json" ]; then
          echo "Validating Grafana dashboard JSON..."
          python -m json.tool monitoring/grafana/selfcoding_dashboard.json > /dev/null
          echo "✅ Dashboard JSON is valid"
        else
          echo "No Grafana dashboard found to validate"
        fi

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [security-scan, code-quality, prometheus-validation, grafana-validation]
    if: always()
    
    steps:
    - name: Security Check Summary
      run: |
        echo "## Security and Quality Check Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Secret Scan | ${{ needs.security-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Code Quality | ${{ needs.code-quality.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Prometheus Rules | ${{ needs.prometheus-validation.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Grafana Dashboard | ${{ needs.grafana-validation.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
