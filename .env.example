# Example .env file for docker-compose and Docker Swarm deployments
# Fill in your own values and keep this file secret in production!

# API and App Secrets
OPENAI_API_KEY=your-openai-api-key           # OpenAI API key
OPENAI_API_KEY_FILE=                        # Will be provided via Docker secret as /run/secrets/openai_api_key
GEMINI_API_KEY=your-gemini-api-key           # Gemini API key
GEMINI_API_KEY_FILE=                        # Will be provided via Docker secret as /run/secrets/gemini_api_key
VENICE_AI_API_KEY=your-venice-api-key        # Venice AI API key
VENICE_AI_API_KEY_FILE=                     # Will be provided via Docker secret as /run/secrets/venice_ai_api_key

# Database Credentials
POSTGRES_USER=postgres                       # PostgreSQL user
POSTGRES_PASSWORD=postgres                   # PostgreSQL password
POSTGRES_PASSWORD_FILE=                      # Will be provided via Docker secret as /run/secrets/postgres_password
POSTGRES_DB=postgres                         # PostgreSQL database name

# Connection URLs
DATABASE_URL=postgresql://postgres:postgres@postgres:5432/postgres   # Update for your DB
DB_URL=postgresql://postgres:postgres@postgres:5432/postgres         # Alternative name for DATABASE_URL
PG_URI=postgresql://postgres:postgres@postgres:5432/postgres         # Alternative name for DATABASE_URL
API_HEALTH_URL=http://localhost:8080/health          # API Gateway health check URL

# Redis Configuration
REDIS_URL=redis://localhost:6379                                     # Redis connection URL
CACHE_URL=redis://localhost:6379                                     # Alternative name for REDIS_URL
REDIS_CLUSTER_URL=redis-cluster:6379,redis-cluster:6380,redis-cluster:6381,redis-cluster:6382,redis-cluster:6383,redis-cluster:6384

# App/Service Secrets
API_JWT_SECRET=your-api-jwt-secret           # JWT secret for API
API_JWT_SECRET_FILE=                         # Will be provided via Docker secret as /run/secrets/api_jwt_secret
STORE_BACKEND=postgres                       # e.g. postgres, sqlite, etc
PORT=3000                                    # App port

# Cloudflare/Proxy
CLOUDFLARE_API_TOKEN=your-cloudflare-token
CLOUDFLARE_API_TOKEN_FILE=                   # Will be provided via Docker secret as /run/secrets/cloudflare_api_token

# Grafana
GF_SECURITY_ADMIN_PASSWORD=your-grafana-admin-password
GF_SECURITY_ADMIN_PASSWORD_FILE=             # Will be provided via Docker secret as /run/secrets/gf_admin_password

# Redis Cluster
REDIS_PASSWORD=your-redis-password
REDIS_NODES=6

# Spiral App
SHARD_ID=0
SPIRAL_KMS_KEY=your-spiral-kms-key
SPIRAL_EVENT_SECRET=your-spiral-event-secret

# Web/Other
NODE_ENV=production
CONSCIOUSNESS_MODE=full
HARMONY_TARGET=0.951
PROCESSING_FREQUENCY=100
API_INTEGRATION_MODE=enhanced
MATHEMATICAL_INTEGRATION=enabled
EMOTIONAL_INTELLIGENCE=enabled
BAYESIAN_DECISION_MAKING=enabled
GEMINI_DUAL_MODEL=enabled
NODE_OPTIONS=--max_old_space_size=4096

# Additional (if needed by your code or other services)
REALITY_GENERATION_MODE=autonomous
AUTONOMOUS_IMAGINATION=enabled
IMAGINATION_CPU_CORES=2
IMAGINATION_CYCLE_MINUTES=5
REALITY_GENERATION_PORT=5006
REALITY_GENERATOR_URL=http://reality-generator:5006

# Add any additional referenced variables here as needed

# WebSocket endpoints (optional â€“ defaults are service names)
MAIN_SERVER_WS=ws://web:3000/ws/consciousness-chat
CORE_WS=ws://core:3002/ws/consciousness-chat
FALLBACK_WS=ws://core:3002/ws/consciousness-chat

# Spiral Explorer WebSocket (for client live updates)
VITE_SPIRAL_WS=ws://localhost:3000/ws/spiral                          # Spiral Explorer WebSocket URL
